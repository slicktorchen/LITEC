                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module HW10
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _vsprintf
                                     16 	.globl _printf
                                     17 	.globl _getchar_nw
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _Data
                                    307 	.globl _heading
                                    308 	.globl _new_heading
                                    309 	.globl _range
                                    310 	.globl _new_range
                                    311 	.globl _num_bytes
                                    312 	.globl _start_reg
                                    313 	.globl _addr
                                    314 	.globl _counts
                                    315 	.globl _PCA_count
                                    316 	.globl _i2c_read_data_PARM_4
                                    317 	.globl _i2c_read_data_PARM_3
                                    318 	.globl _i2c_read_data_PARM_2
                                    319 	.globl _i2c_write_data_PARM_4
                                    320 	.globl _i2c_write_data_PARM_3
                                    321 	.globl _i2c_write_data_PARM_2
                                    322 	.globl _aligned_alloc_PARM_2
                                    323 	.globl _Data2
                                    324 	.globl _lcd_print
                                    325 	.globl _lcd_clear
                                    326 	.globl _kpd_input
                                    327 	.globl _delay_time
                                    328 	.globl _i2c_start
                                    329 	.globl _i2c_write
                                    330 	.globl _i2c_write_and_stop
                                    331 	.globl _i2c_read
                                    332 	.globl _i2c_read_and_stop
                                    333 	.globl _i2c_write_data
                                    334 	.globl _i2c_read_data
                                    335 	.globl _Accel_Init
                                    336 	.globl _Accel_Init_C
                                    337 	.globl _XBR0_Init
                                    338 	.globl _PCA_Init
                                    339 	.globl _SMB_Init
                                    340 	.globl _PCA_ISR
                                    341 	.globl _ReadRanger
                                    342 	.globl _ReadCompass
                                    343 ;--------------------------------------------------------
                                    344 ; special function registers
                                    345 ;--------------------------------------------------------
                                    346 	.area RSEG    (ABS,DATA)
      000000                        347 	.org 0x0000
                           000080   348 G$P0$0$0 == 0x0080
                           000080   349 _P0	=	0x0080
                           000081   350 G$SP$0$0 == 0x0081
                           000081   351 _SP	=	0x0081
                           000082   352 G$DPL$0$0 == 0x0082
                           000082   353 _DPL	=	0x0082
                           000083   354 G$DPH$0$0 == 0x0083
                           000083   355 _DPH	=	0x0083
                           000084   356 G$P4$0$0 == 0x0084
                           000084   357 _P4	=	0x0084
                           000085   358 G$P5$0$0 == 0x0085
                           000085   359 _P5	=	0x0085
                           000086   360 G$P6$0$0 == 0x0086
                           000086   361 _P6	=	0x0086
                           000087   362 G$PCON$0$0 == 0x0087
                           000087   363 _PCON	=	0x0087
                           000088   364 G$TCON$0$0 == 0x0088
                           000088   365 _TCON	=	0x0088
                           000089   366 G$TMOD$0$0 == 0x0089
                           000089   367 _TMOD	=	0x0089
                           00008A   368 G$TL0$0$0 == 0x008a
                           00008A   369 _TL0	=	0x008a
                           00008B   370 G$TL1$0$0 == 0x008b
                           00008B   371 _TL1	=	0x008b
                           00008C   372 G$TH0$0$0 == 0x008c
                           00008C   373 _TH0	=	0x008c
                           00008D   374 G$TH1$0$0 == 0x008d
                           00008D   375 _TH1	=	0x008d
                           00008E   376 G$CKCON$0$0 == 0x008e
                           00008E   377 _CKCON	=	0x008e
                           00008F   378 G$PSCTL$0$0 == 0x008f
                           00008F   379 _PSCTL	=	0x008f
                           000090   380 G$P1$0$0 == 0x0090
                           000090   381 _P1	=	0x0090
                           000091   382 G$TMR3CN$0$0 == 0x0091
                           000091   383 _TMR3CN	=	0x0091
                           000092   384 G$TMR3RLL$0$0 == 0x0092
                           000092   385 _TMR3RLL	=	0x0092
                           000093   386 G$TMR3RLH$0$0 == 0x0093
                           000093   387 _TMR3RLH	=	0x0093
                           000094   388 G$TMR3L$0$0 == 0x0094
                           000094   389 _TMR3L	=	0x0094
                           000095   390 G$TMR3H$0$0 == 0x0095
                           000095   391 _TMR3H	=	0x0095
                           000096   392 G$P7$0$0 == 0x0096
                           000096   393 _P7	=	0x0096
                           000098   394 G$SCON$0$0 == 0x0098
                           000098   395 _SCON	=	0x0098
                           000098   396 G$SCON0$0$0 == 0x0098
                           000098   397 _SCON0	=	0x0098
                           000099   398 G$SBUF$0$0 == 0x0099
                           000099   399 _SBUF	=	0x0099
                           000099   400 G$SBUF0$0$0 == 0x0099
                           000099   401 _SBUF0	=	0x0099
                           00009A   402 G$SPI0CFG$0$0 == 0x009a
                           00009A   403 _SPI0CFG	=	0x009a
                           00009B   404 G$SPI0DAT$0$0 == 0x009b
                           00009B   405 _SPI0DAT	=	0x009b
                           00009C   406 G$ADC1$0$0 == 0x009c
                           00009C   407 _ADC1	=	0x009c
                           00009D   408 G$SPI0CKR$0$0 == 0x009d
                           00009D   409 _SPI0CKR	=	0x009d
                           00009E   410 G$CPT0CN$0$0 == 0x009e
                           00009E   411 _CPT0CN	=	0x009e
                           00009F   412 G$CPT1CN$0$0 == 0x009f
                           00009F   413 _CPT1CN	=	0x009f
                           0000A0   414 G$P2$0$0 == 0x00a0
                           0000A0   415 _P2	=	0x00a0
                           0000A1   416 G$EMI0TC$0$0 == 0x00a1
                           0000A1   417 _EMI0TC	=	0x00a1
                           0000A3   418 G$EMI0CF$0$0 == 0x00a3
                           0000A3   419 _EMI0CF	=	0x00a3
                           0000A4   420 G$PRT0CF$0$0 == 0x00a4
                           0000A4   421 _PRT0CF	=	0x00a4
                           0000A4   422 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   423 _P0MDOUT	=	0x00a4
                           0000A5   424 G$PRT1CF$0$0 == 0x00a5
                           0000A5   425 _PRT1CF	=	0x00a5
                           0000A5   426 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   427 _P1MDOUT	=	0x00a5
                           0000A6   428 G$PRT2CF$0$0 == 0x00a6
                           0000A6   429 _PRT2CF	=	0x00a6
                           0000A6   430 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   431 _P2MDOUT	=	0x00a6
                           0000A7   432 G$PRT3CF$0$0 == 0x00a7
                           0000A7   433 _PRT3CF	=	0x00a7
                           0000A7   434 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   435 _P3MDOUT	=	0x00a7
                           0000A8   436 G$IE$0$0 == 0x00a8
                           0000A8   437 _IE	=	0x00a8
                           0000A9   438 G$SADDR0$0$0 == 0x00a9
                           0000A9   439 _SADDR0	=	0x00a9
                           0000AA   440 G$ADC1CN$0$0 == 0x00aa
                           0000AA   441 _ADC1CN	=	0x00aa
                           0000AB   442 G$ADC1CF$0$0 == 0x00ab
                           0000AB   443 _ADC1CF	=	0x00ab
                           0000AC   444 G$AMX1SL$0$0 == 0x00ac
                           0000AC   445 _AMX1SL	=	0x00ac
                           0000AD   446 G$P3IF$0$0 == 0x00ad
                           0000AD   447 _P3IF	=	0x00ad
                           0000AE   448 G$SADEN1$0$0 == 0x00ae
                           0000AE   449 _SADEN1	=	0x00ae
                           0000AF   450 G$EMI0CN$0$0 == 0x00af
                           0000AF   451 _EMI0CN	=	0x00af
                           0000AF   452 G$_XPAGE$0$0 == 0x00af
                           0000AF   453 __XPAGE	=	0x00af
                           0000B0   454 G$P3$0$0 == 0x00b0
                           0000B0   455 _P3	=	0x00b0
                           0000B1   456 G$OSCXCN$0$0 == 0x00b1
                           0000B1   457 _OSCXCN	=	0x00b1
                           0000B2   458 G$OSCICN$0$0 == 0x00b2
                           0000B2   459 _OSCICN	=	0x00b2
                           0000B5   460 G$P74OUT$0$0 == 0x00b5
                           0000B5   461 _P74OUT	=	0x00b5
                           0000B6   462 G$FLSCL$0$0 == 0x00b6
                           0000B6   463 _FLSCL	=	0x00b6
                           0000B7   464 G$FLACL$0$0 == 0x00b7
                           0000B7   465 _FLACL	=	0x00b7
                           0000B8   466 G$IP$0$0 == 0x00b8
                           0000B8   467 _IP	=	0x00b8
                           0000B9   468 G$SADEN0$0$0 == 0x00b9
                           0000B9   469 _SADEN0	=	0x00b9
                           0000BA   470 G$AMX0CF$0$0 == 0x00ba
                           0000BA   471 _AMX0CF	=	0x00ba
                           0000BB   472 G$AMX0SL$0$0 == 0x00bb
                           0000BB   473 _AMX0SL	=	0x00bb
                           0000BC   474 G$ADC0CF$0$0 == 0x00bc
                           0000BC   475 _ADC0CF	=	0x00bc
                           0000BD   476 G$P1MDIN$0$0 == 0x00bd
                           0000BD   477 _P1MDIN	=	0x00bd
                           0000BE   478 G$ADC0L$0$0 == 0x00be
                           0000BE   479 _ADC0L	=	0x00be
                           0000BF   480 G$ADC0H$0$0 == 0x00bf
                           0000BF   481 _ADC0H	=	0x00bf
                           0000C0   482 G$SMB0CN$0$0 == 0x00c0
                           0000C0   483 _SMB0CN	=	0x00c0
                           0000C1   484 G$SMB0STA$0$0 == 0x00c1
                           0000C1   485 _SMB0STA	=	0x00c1
                           0000C2   486 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   487 _SMB0DAT	=	0x00c2
                           0000C3   488 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   489 _SMB0ADR	=	0x00c3
                           0000C4   490 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   491 _ADC0GTL	=	0x00c4
                           0000C5   492 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   493 _ADC0GTH	=	0x00c5
                           0000C6   494 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   495 _ADC0LTL	=	0x00c6
                           0000C7   496 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   497 _ADC0LTH	=	0x00c7
                           0000C8   498 G$T2CON$0$0 == 0x00c8
                           0000C8   499 _T2CON	=	0x00c8
                           0000C9   500 G$T4CON$0$0 == 0x00c9
                           0000C9   501 _T4CON	=	0x00c9
                           0000CA   502 G$RCAP2L$0$0 == 0x00ca
                           0000CA   503 _RCAP2L	=	0x00ca
                           0000CB   504 G$RCAP2H$0$0 == 0x00cb
                           0000CB   505 _RCAP2H	=	0x00cb
                           0000CC   506 G$TL2$0$0 == 0x00cc
                           0000CC   507 _TL2	=	0x00cc
                           0000CD   508 G$TH2$0$0 == 0x00cd
                           0000CD   509 _TH2	=	0x00cd
                           0000CF   510 G$SMB0CR$0$0 == 0x00cf
                           0000CF   511 _SMB0CR	=	0x00cf
                           0000D0   512 G$PSW$0$0 == 0x00d0
                           0000D0   513 _PSW	=	0x00d0
                           0000D1   514 G$REF0CN$0$0 == 0x00d1
                           0000D1   515 _REF0CN	=	0x00d1
                           0000D2   516 G$DAC0L$0$0 == 0x00d2
                           0000D2   517 _DAC0L	=	0x00d2
                           0000D3   518 G$DAC0H$0$0 == 0x00d3
                           0000D3   519 _DAC0H	=	0x00d3
                           0000D4   520 G$DAC0CN$0$0 == 0x00d4
                           0000D4   521 _DAC0CN	=	0x00d4
                           0000D5   522 G$DAC1L$0$0 == 0x00d5
                           0000D5   523 _DAC1L	=	0x00d5
                           0000D6   524 G$DAC1H$0$0 == 0x00d6
                           0000D6   525 _DAC1H	=	0x00d6
                           0000D7   526 G$DAC1CN$0$0 == 0x00d7
                           0000D7   527 _DAC1CN	=	0x00d7
                           0000D8   528 G$PCA0CN$0$0 == 0x00d8
                           0000D8   529 _PCA0CN	=	0x00d8
                           0000D9   530 G$PCA0MD$0$0 == 0x00d9
                           0000D9   531 _PCA0MD	=	0x00d9
                           0000DA   532 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   533 _PCA0CPM0	=	0x00da
                           0000DB   534 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   535 _PCA0CPM1	=	0x00db
                           0000DC   536 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   537 _PCA0CPM2	=	0x00dc
                           0000DD   538 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   539 _PCA0CPM3	=	0x00dd
                           0000DE   540 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   541 _PCA0CPM4	=	0x00de
                           0000E0   542 G$ACC$0$0 == 0x00e0
                           0000E0   543 _ACC	=	0x00e0
                           0000E1   544 G$XBR0$0$0 == 0x00e1
                           0000E1   545 _XBR0	=	0x00e1
                           0000E2   546 G$XBR1$0$0 == 0x00e2
                           0000E2   547 _XBR1	=	0x00e2
                           0000E3   548 G$XBR2$0$0 == 0x00e3
                           0000E3   549 _XBR2	=	0x00e3
                           0000E4   550 G$RCAP4L$0$0 == 0x00e4
                           0000E4   551 _RCAP4L	=	0x00e4
                           0000E5   552 G$RCAP4H$0$0 == 0x00e5
                           0000E5   553 _RCAP4H	=	0x00e5
                           0000E6   554 G$EIE1$0$0 == 0x00e6
                           0000E6   555 _EIE1	=	0x00e6
                           0000E7   556 G$EIE2$0$0 == 0x00e7
                           0000E7   557 _EIE2	=	0x00e7
                           0000E8   558 G$ADC0CN$0$0 == 0x00e8
                           0000E8   559 _ADC0CN	=	0x00e8
                           0000E9   560 G$PCA0L$0$0 == 0x00e9
                           0000E9   561 _PCA0L	=	0x00e9
                           0000EA   562 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   563 _PCA0CPL0	=	0x00ea
                           0000EB   564 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   565 _PCA0CPL1	=	0x00eb
                           0000EC   566 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   567 _PCA0CPL2	=	0x00ec
                           0000ED   568 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   569 _PCA0CPL3	=	0x00ed
                           0000EE   570 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   571 _PCA0CPL4	=	0x00ee
                           0000EF   572 G$RSTSRC$0$0 == 0x00ef
                           0000EF   573 _RSTSRC	=	0x00ef
                           0000F0   574 G$B$0$0 == 0x00f0
                           0000F0   575 _B	=	0x00f0
                           0000F1   576 G$SCON1$0$0 == 0x00f1
                           0000F1   577 _SCON1	=	0x00f1
                           0000F2   578 G$SBUF1$0$0 == 0x00f2
                           0000F2   579 _SBUF1	=	0x00f2
                           0000F3   580 G$SADDR1$0$0 == 0x00f3
                           0000F3   581 _SADDR1	=	0x00f3
                           0000F4   582 G$TL4$0$0 == 0x00f4
                           0000F4   583 _TL4	=	0x00f4
                           0000F5   584 G$TH4$0$0 == 0x00f5
                           0000F5   585 _TH4	=	0x00f5
                           0000F6   586 G$EIP1$0$0 == 0x00f6
                           0000F6   587 _EIP1	=	0x00f6
                           0000F7   588 G$EIP2$0$0 == 0x00f7
                           0000F7   589 _EIP2	=	0x00f7
                           0000F8   590 G$SPI0CN$0$0 == 0x00f8
                           0000F8   591 _SPI0CN	=	0x00f8
                           0000F9   592 G$PCA0H$0$0 == 0x00f9
                           0000F9   593 _PCA0H	=	0x00f9
                           0000FA   594 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   595 _PCA0CPH0	=	0x00fa
                           0000FB   596 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   597 _PCA0CPH1	=	0x00fb
                           0000FC   598 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   599 _PCA0CPH2	=	0x00fc
                           0000FD   600 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   601 _PCA0CPH3	=	0x00fd
                           0000FE   602 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   603 _PCA0CPH4	=	0x00fe
                           0000FF   604 G$WDTCN$0$0 == 0x00ff
                           0000FF   605 _WDTCN	=	0x00ff
                           008C8A   606 G$TMR0$0$0 == 0x8c8a
                           008C8A   607 _TMR0	=	0x8c8a
                           008D8B   608 G$TMR1$0$0 == 0x8d8b
                           008D8B   609 _TMR1	=	0x8d8b
                           00CDCC   610 G$TMR2$0$0 == 0xcdcc
                           00CDCC   611 _TMR2	=	0xcdcc
                           00CBCA   612 G$RCAP2$0$0 == 0xcbca
                           00CBCA   613 _RCAP2	=	0xcbca
                           009594   614 G$TMR3$0$0 == 0x9594
                           009594   615 _TMR3	=	0x9594
                           009392   616 G$TMR3RL$0$0 == 0x9392
                           009392   617 _TMR3RL	=	0x9392
                           00F5F4   618 G$TMR4$0$0 == 0xf5f4
                           00F5F4   619 _TMR4	=	0xf5f4
                           00E5E4   620 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   621 _RCAP4	=	0xe5e4
                           00BFBE   622 G$ADC0$0$0 == 0xbfbe
                           00BFBE   623 _ADC0	=	0xbfbe
                           00C5C4   624 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   625 _ADC0GT	=	0xc5c4
                           00C7C6   626 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   627 _ADC0LT	=	0xc7c6
                           00D3D2   628 G$DAC0$0$0 == 0xd3d2
                           00D3D2   629 _DAC0	=	0xd3d2
                           00D6D5   630 G$DAC1$0$0 == 0xd6d5
                           00D6D5   631 _DAC1	=	0xd6d5
                           00F9E9   632 G$PCA0$0$0 == 0xf9e9
                           00F9E9   633 _PCA0	=	0xf9e9
                           00FAEA   634 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   635 _PCA0CP0	=	0xfaea
                           00FBEB   636 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   637 _PCA0CP1	=	0xfbeb
                           00FCEC   638 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   639 _PCA0CP2	=	0xfcec
                           00FDED   640 G$PCA0CP3$0$0 == 0xfded
                           00FDED   641 _PCA0CP3	=	0xfded
                           00FEEE   642 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   643 _PCA0CP4	=	0xfeee
                                    644 ;--------------------------------------------------------
                                    645 ; special function bits
                                    646 ;--------------------------------------------------------
                                    647 	.area RSEG    (ABS,DATA)
      000000                        648 	.org 0x0000
                           000080   649 G$P0_0$0$0 == 0x0080
                           000080   650 _P0_0	=	0x0080
                           000081   651 G$P0_1$0$0 == 0x0081
                           000081   652 _P0_1	=	0x0081
                           000082   653 G$P0_2$0$0 == 0x0082
                           000082   654 _P0_2	=	0x0082
                           000083   655 G$P0_3$0$0 == 0x0083
                           000083   656 _P0_3	=	0x0083
                           000084   657 G$P0_4$0$0 == 0x0084
                           000084   658 _P0_4	=	0x0084
                           000085   659 G$P0_5$0$0 == 0x0085
                           000085   660 _P0_5	=	0x0085
                           000086   661 G$P0_6$0$0 == 0x0086
                           000086   662 _P0_6	=	0x0086
                           000087   663 G$P0_7$0$0 == 0x0087
                           000087   664 _P0_7	=	0x0087
                           000088   665 G$IT0$0$0 == 0x0088
                           000088   666 _IT0	=	0x0088
                           000089   667 G$IE0$0$0 == 0x0089
                           000089   668 _IE0	=	0x0089
                           00008A   669 G$IT1$0$0 == 0x008a
                           00008A   670 _IT1	=	0x008a
                           00008B   671 G$IE1$0$0 == 0x008b
                           00008B   672 _IE1	=	0x008b
                           00008C   673 G$TR0$0$0 == 0x008c
                           00008C   674 _TR0	=	0x008c
                           00008D   675 G$TF0$0$0 == 0x008d
                           00008D   676 _TF0	=	0x008d
                           00008E   677 G$TR1$0$0 == 0x008e
                           00008E   678 _TR1	=	0x008e
                           00008F   679 G$TF1$0$0 == 0x008f
                           00008F   680 _TF1	=	0x008f
                           000090   681 G$P1_0$0$0 == 0x0090
                           000090   682 _P1_0	=	0x0090
                           000091   683 G$P1_1$0$0 == 0x0091
                           000091   684 _P1_1	=	0x0091
                           000092   685 G$P1_2$0$0 == 0x0092
                           000092   686 _P1_2	=	0x0092
                           000093   687 G$P1_3$0$0 == 0x0093
                           000093   688 _P1_3	=	0x0093
                           000094   689 G$P1_4$0$0 == 0x0094
                           000094   690 _P1_4	=	0x0094
                           000095   691 G$P1_5$0$0 == 0x0095
                           000095   692 _P1_5	=	0x0095
                           000096   693 G$P1_6$0$0 == 0x0096
                           000096   694 _P1_6	=	0x0096
                           000097   695 G$P1_7$0$0 == 0x0097
                           000097   696 _P1_7	=	0x0097
                           000098   697 G$RI$0$0 == 0x0098
                           000098   698 _RI	=	0x0098
                           000098   699 G$RI0$0$0 == 0x0098
                           000098   700 _RI0	=	0x0098
                           000099   701 G$TI$0$0 == 0x0099
                           000099   702 _TI	=	0x0099
                           000099   703 G$TI0$0$0 == 0x0099
                           000099   704 _TI0	=	0x0099
                           00009A   705 G$RB8$0$0 == 0x009a
                           00009A   706 _RB8	=	0x009a
                           00009A   707 G$RB80$0$0 == 0x009a
                           00009A   708 _RB80	=	0x009a
                           00009B   709 G$TB8$0$0 == 0x009b
                           00009B   710 _TB8	=	0x009b
                           00009B   711 G$TB80$0$0 == 0x009b
                           00009B   712 _TB80	=	0x009b
                           00009C   713 G$REN$0$0 == 0x009c
                           00009C   714 _REN	=	0x009c
                           00009C   715 G$REN0$0$0 == 0x009c
                           00009C   716 _REN0	=	0x009c
                           00009D   717 G$SM2$0$0 == 0x009d
                           00009D   718 _SM2	=	0x009d
                           00009D   719 G$SM20$0$0 == 0x009d
                           00009D   720 _SM20	=	0x009d
                           00009D   721 G$MCE0$0$0 == 0x009d
                           00009D   722 _MCE0	=	0x009d
                           00009E   723 G$SM1$0$0 == 0x009e
                           00009E   724 _SM1	=	0x009e
                           00009E   725 G$SM10$0$0 == 0x009e
                           00009E   726 _SM10	=	0x009e
                           00009F   727 G$SM0$0$0 == 0x009f
                           00009F   728 _SM0	=	0x009f
                           00009F   729 G$SM00$0$0 == 0x009f
                           00009F   730 _SM00	=	0x009f
                           00009F   731 G$S0MODE$0$0 == 0x009f
                           00009F   732 _S0MODE	=	0x009f
                           0000A0   733 G$P2_0$0$0 == 0x00a0
                           0000A0   734 _P2_0	=	0x00a0
                           0000A1   735 G$P2_1$0$0 == 0x00a1
                           0000A1   736 _P2_1	=	0x00a1
                           0000A2   737 G$P2_2$0$0 == 0x00a2
                           0000A2   738 _P2_2	=	0x00a2
                           0000A3   739 G$P2_3$0$0 == 0x00a3
                           0000A3   740 _P2_3	=	0x00a3
                           0000A4   741 G$P2_4$0$0 == 0x00a4
                           0000A4   742 _P2_4	=	0x00a4
                           0000A5   743 G$P2_5$0$0 == 0x00a5
                           0000A5   744 _P2_5	=	0x00a5
                           0000A6   745 G$P2_6$0$0 == 0x00a6
                           0000A6   746 _P2_6	=	0x00a6
                           0000A7   747 G$P2_7$0$0 == 0x00a7
                           0000A7   748 _P2_7	=	0x00a7
                           0000A8   749 G$EX0$0$0 == 0x00a8
                           0000A8   750 _EX0	=	0x00a8
                           0000A9   751 G$ET0$0$0 == 0x00a9
                           0000A9   752 _ET0	=	0x00a9
                           0000AA   753 G$EX1$0$0 == 0x00aa
                           0000AA   754 _EX1	=	0x00aa
                           0000AB   755 G$ET1$0$0 == 0x00ab
                           0000AB   756 _ET1	=	0x00ab
                           0000AC   757 G$ES0$0$0 == 0x00ac
                           0000AC   758 _ES0	=	0x00ac
                           0000AC   759 G$ES$0$0 == 0x00ac
                           0000AC   760 _ES	=	0x00ac
                           0000AD   761 G$ET2$0$0 == 0x00ad
                           0000AD   762 _ET2	=	0x00ad
                           0000AF   763 G$EA$0$0 == 0x00af
                           0000AF   764 _EA	=	0x00af
                           0000B0   765 G$P3_0$0$0 == 0x00b0
                           0000B0   766 _P3_0	=	0x00b0
                           0000B1   767 G$P3_1$0$0 == 0x00b1
                           0000B1   768 _P3_1	=	0x00b1
                           0000B2   769 G$P3_2$0$0 == 0x00b2
                           0000B2   770 _P3_2	=	0x00b2
                           0000B3   771 G$P3_3$0$0 == 0x00b3
                           0000B3   772 _P3_3	=	0x00b3
                           0000B4   773 G$P3_4$0$0 == 0x00b4
                           0000B4   774 _P3_4	=	0x00b4
                           0000B5   775 G$P3_5$0$0 == 0x00b5
                           0000B5   776 _P3_5	=	0x00b5
                           0000B6   777 G$P3_6$0$0 == 0x00b6
                           0000B6   778 _P3_6	=	0x00b6
                           0000B7   779 G$P3_7$0$0 == 0x00b7
                           0000B7   780 _P3_7	=	0x00b7
                           0000B8   781 G$PX0$0$0 == 0x00b8
                           0000B8   782 _PX0	=	0x00b8
                           0000B9   783 G$PT0$0$0 == 0x00b9
                           0000B9   784 _PT0	=	0x00b9
                           0000BA   785 G$PX1$0$0 == 0x00ba
                           0000BA   786 _PX1	=	0x00ba
                           0000BB   787 G$PT1$0$0 == 0x00bb
                           0000BB   788 _PT1	=	0x00bb
                           0000BC   789 G$PS0$0$0 == 0x00bc
                           0000BC   790 _PS0	=	0x00bc
                           0000BC   791 G$PS$0$0 == 0x00bc
                           0000BC   792 _PS	=	0x00bc
                           0000BD   793 G$PT2$0$0 == 0x00bd
                           0000BD   794 _PT2	=	0x00bd
                           0000C0   795 G$SMBTOE$0$0 == 0x00c0
                           0000C0   796 _SMBTOE	=	0x00c0
                           0000C1   797 G$SMBFTE$0$0 == 0x00c1
                           0000C1   798 _SMBFTE	=	0x00c1
                           0000C2   799 G$AA$0$0 == 0x00c2
                           0000C2   800 _AA	=	0x00c2
                           0000C3   801 G$SI$0$0 == 0x00c3
                           0000C3   802 _SI	=	0x00c3
                           0000C4   803 G$STO$0$0 == 0x00c4
                           0000C4   804 _STO	=	0x00c4
                           0000C5   805 G$STA$0$0 == 0x00c5
                           0000C5   806 _STA	=	0x00c5
                           0000C6   807 G$ENSMB$0$0 == 0x00c6
                           0000C6   808 _ENSMB	=	0x00c6
                           0000C7   809 G$BUSY$0$0 == 0x00c7
                           0000C7   810 _BUSY	=	0x00c7
                           0000C8   811 G$CPRL2$0$0 == 0x00c8
                           0000C8   812 _CPRL2	=	0x00c8
                           0000C9   813 G$CT2$0$0 == 0x00c9
                           0000C9   814 _CT2	=	0x00c9
                           0000CA   815 G$TR2$0$0 == 0x00ca
                           0000CA   816 _TR2	=	0x00ca
                           0000CB   817 G$EXEN2$0$0 == 0x00cb
                           0000CB   818 _EXEN2	=	0x00cb
                           0000CC   819 G$TCLK$0$0 == 0x00cc
                           0000CC   820 _TCLK	=	0x00cc
                           0000CD   821 G$RCLK$0$0 == 0x00cd
                           0000CD   822 _RCLK	=	0x00cd
                           0000CE   823 G$EXF2$0$0 == 0x00ce
                           0000CE   824 _EXF2	=	0x00ce
                           0000CF   825 G$TF2$0$0 == 0x00cf
                           0000CF   826 _TF2	=	0x00cf
                           0000D0   827 G$P$0$0 == 0x00d0
                           0000D0   828 _P	=	0x00d0
                           0000D1   829 G$F1$0$0 == 0x00d1
                           0000D1   830 _F1	=	0x00d1
                           0000D2   831 G$OV$0$0 == 0x00d2
                           0000D2   832 _OV	=	0x00d2
                           0000D3   833 G$RS0$0$0 == 0x00d3
                           0000D3   834 _RS0	=	0x00d3
                           0000D4   835 G$RS1$0$0 == 0x00d4
                           0000D4   836 _RS1	=	0x00d4
                           0000D5   837 G$F0$0$0 == 0x00d5
                           0000D5   838 _F0	=	0x00d5
                           0000D6   839 G$AC$0$0 == 0x00d6
                           0000D6   840 _AC	=	0x00d6
                           0000D7   841 G$CY$0$0 == 0x00d7
                           0000D7   842 _CY	=	0x00d7
                           0000D8   843 G$CCF0$0$0 == 0x00d8
                           0000D8   844 _CCF0	=	0x00d8
                           0000D9   845 G$CCF1$0$0 == 0x00d9
                           0000D9   846 _CCF1	=	0x00d9
                           0000DA   847 G$CCF2$0$0 == 0x00da
                           0000DA   848 _CCF2	=	0x00da
                           0000DB   849 G$CCF3$0$0 == 0x00db
                           0000DB   850 _CCF3	=	0x00db
                           0000DC   851 G$CCF4$0$0 == 0x00dc
                           0000DC   852 _CCF4	=	0x00dc
                           0000DE   853 G$CR$0$0 == 0x00de
                           0000DE   854 _CR	=	0x00de
                           0000DF   855 G$CF$0$0 == 0x00df
                           0000DF   856 _CF	=	0x00df
                           0000E8   857 G$ADLJST$0$0 == 0x00e8
                           0000E8   858 _ADLJST	=	0x00e8
                           0000E8   859 G$AD0LJST$0$0 == 0x00e8
                           0000E8   860 _AD0LJST	=	0x00e8
                           0000E9   861 G$ADWINT$0$0 == 0x00e9
                           0000E9   862 _ADWINT	=	0x00e9
                           0000E9   863 G$AD0WINT$0$0 == 0x00e9
                           0000E9   864 _AD0WINT	=	0x00e9
                           0000EA   865 G$ADSTM0$0$0 == 0x00ea
                           0000EA   866 _ADSTM0	=	0x00ea
                           0000EA   867 G$AD0CM0$0$0 == 0x00ea
                           0000EA   868 _AD0CM0	=	0x00ea
                           0000EB   869 G$ADSTM1$0$0 == 0x00eb
                           0000EB   870 _ADSTM1	=	0x00eb
                           0000EB   871 G$AD0CM1$0$0 == 0x00eb
                           0000EB   872 _AD0CM1	=	0x00eb
                           0000EC   873 G$ADBUSY$0$0 == 0x00ec
                           0000EC   874 _ADBUSY	=	0x00ec
                           0000EC   875 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   876 _AD0BUSY	=	0x00ec
                           0000ED   877 G$ADCINT$0$0 == 0x00ed
                           0000ED   878 _ADCINT	=	0x00ed
                           0000ED   879 G$AD0INT$0$0 == 0x00ed
                           0000ED   880 _AD0INT	=	0x00ed
                           0000EE   881 G$ADCTM$0$0 == 0x00ee
                           0000EE   882 _ADCTM	=	0x00ee
                           0000EE   883 G$AD0TM$0$0 == 0x00ee
                           0000EE   884 _AD0TM	=	0x00ee
                           0000EF   885 G$ADCEN$0$0 == 0x00ef
                           0000EF   886 _ADCEN	=	0x00ef
                           0000EF   887 G$AD0EN$0$0 == 0x00ef
                           0000EF   888 _AD0EN	=	0x00ef
                           0000F8   889 G$SPIEN$0$0 == 0x00f8
                           0000F8   890 _SPIEN	=	0x00f8
                           0000F9   891 G$MSTEN$0$0 == 0x00f9
                           0000F9   892 _MSTEN	=	0x00f9
                           0000FA   893 G$SLVSEL$0$0 == 0x00fa
                           0000FA   894 _SLVSEL	=	0x00fa
                           0000FB   895 G$TXBSY$0$0 == 0x00fb
                           0000FB   896 _TXBSY	=	0x00fb
                           0000FC   897 G$RXOVRN$0$0 == 0x00fc
                           0000FC   898 _RXOVRN	=	0x00fc
                           0000FD   899 G$MODF$0$0 == 0x00fd
                           0000FD   900 _MODF	=	0x00fd
                           0000FE   901 G$WCOL$0$0 == 0x00fe
                           0000FE   902 _WCOL	=	0x00fe
                           0000FF   903 G$SPIF$0$0 == 0x00ff
                           0000FF   904 _SPIF	=	0x00ff
                           0000C7   905 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   906 _BUS_BUSY	=	0x00c7
                           0000C6   907 G$BUS_EN$0$0 == 0x00c6
                           0000C6   908 _BUS_EN	=	0x00c6
                           0000C5   909 G$BUS_START$0$0 == 0x00c5
                           0000C5   910 _BUS_START	=	0x00c5
                           0000C4   911 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   912 _BUS_STOP	=	0x00c4
                           0000C3   913 G$BUS_INT$0$0 == 0x00c3
                           0000C3   914 _BUS_INT	=	0x00c3
                           0000C2   915 G$BUS_AA$0$0 == 0x00c2
                           0000C2   916 _BUS_AA	=	0x00c2
                           0000C1   917 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   918 _BUS_FTE	=	0x00c1
                           0000C0   919 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   920 _BUS_TOE	=	0x00c0
                           000083   921 G$BUS_SCL$0$0 == 0x0083
                           000083   922 _BUS_SCL	=	0x0083
                                    923 ;--------------------------------------------------------
                                    924 ; overlayable register banks
                                    925 ;--------------------------------------------------------
                                    926 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        927 	.ds 8
                                    928 ;--------------------------------------------------------
                                    929 ; internal ram data
                                    930 ;--------------------------------------------------------
                                    931 	.area DSEG    (DATA)
                           000000   932 G$Data2$0$0==.
      000000                        933 _Data2::
      000000                        934 	.ds 3
                           000003   935 LHW10.aligned_alloc$size$1$39==.
      000003                        936 _aligned_alloc_PARM_2:
      000003                        937 	.ds 2
                           000005   938 LHW10.lcd_clear$NumBytes$1$85==.
      000005                        939 _lcd_clear_NumBytes_1_85:
      000005                        940 	.ds 1
                           000006   941 LHW10.lcd_clear$Cmd$1$85==.
      000006                        942 _lcd_clear_Cmd_1_85:
      000006                        943 	.ds 2
                           000008   944 LHW10.read_keypad$Data$1$86==.
      000008                        945 _read_keypad_Data_1_86:
      000008                        946 	.ds 2
                           00000A   947 LHW10.i2c_write_data$start_reg$1$105==.
      00000A                        948 _i2c_write_data_PARM_2:
      00000A                        949 	.ds 1
                           00000B   950 LHW10.i2c_write_data$buffer$1$105==.
      00000B                        951 _i2c_write_data_PARM_3:
      00000B                        952 	.ds 3
                           00000E   953 LHW10.i2c_write_data$num_bytes$1$105==.
      00000E                        954 _i2c_write_data_PARM_4:
      00000E                        955 	.ds 1
                           00000F   956 LHW10.i2c_read_data$start_reg$1$107==.
      00000F                        957 _i2c_read_data_PARM_2:
      00000F                        958 	.ds 1
                           000010   959 LHW10.i2c_read_data$buffer$1$107==.
      000010                        960 _i2c_read_data_PARM_3:
      000010                        961 	.ds 3
                           000013   962 LHW10.i2c_read_data$num_bytes$1$107==.
      000013                        963 _i2c_read_data_PARM_4:
      000013                        964 	.ds 1
                           000014   965 G$PCA_count$0$0==.
      000014                        966 _PCA_count::
      000014                        967 	.ds 2
                           000016   968 G$counts$0$0==.
      000016                        969 _counts::
      000016                        970 	.ds 2
                           000018   971 G$addr$0$0==.
      000018                        972 _addr::
      000018                        973 	.ds 1
                           000019   974 G$start_reg$0$0==.
      000019                        975 _start_reg::
      000019                        976 	.ds 1
                           00001A   977 G$num_bytes$0$0==.
      00001A                        978 _num_bytes::
      00001A                        979 	.ds 1
                           00001B   980 G$new_range$0$0==.
      00001B                        981 _new_range::
      00001B                        982 	.ds 1
                           00001C   983 G$range$0$0==.
      00001C                        984 _range::
      00001C                        985 	.ds 1
                           00001D   986 G$new_heading$0$0==.
      00001D                        987 _new_heading::
      00001D                        988 	.ds 1
                           00001E   989 G$heading$0$0==.
      00001E                        990 _heading::
      00001E                        991 	.ds 1
                           00001F   992 G$Data$0$0==.
      00001F                        993 _Data::
      00001F                        994 	.ds 3
                           000022   995 LHW10.ReadRanger$Data$1$137==.
      000022                        996 _ReadRanger_Data_1_137:
      000022                        997 	.ds 2
                           000024   998 LHW10.ReadCompass$Data$1$139==.
      000024                        999 _ReadCompass_Data_1_139:
      000024                       1000 	.ds 2
                                   1001 ;--------------------------------------------------------
                                   1002 ; overlayable items in internal ram 
                                   1003 ;--------------------------------------------------------
                                   1004 	.area	OSEG    (OVR,DATA)
                                   1005 	.area	OSEG    (OVR,DATA)
                                   1006 	.area	OSEG    (OVR,DATA)
                                   1007 	.area	OSEG    (OVR,DATA)
                                   1008 	.area	OSEG    (OVR,DATA)
                                   1009 	.area	OSEG    (OVR,DATA)
                                   1010 	.area	OSEG    (OVR,DATA)
                                   1011 ;--------------------------------------------------------
                                   1012 ; Stack segment in internal ram 
                                   1013 ;--------------------------------------------------------
                                   1014 	.area	SSEG
      000000                       1015 __start__stack:
      000000                       1016 	.ds	1
                                   1017 
                                   1018 ;--------------------------------------------------------
                                   1019 ; indirectly addressable internal ram data
                                   1020 ;--------------------------------------------------------
                                   1021 	.area ISEG    (DATA)
                                   1022 ;--------------------------------------------------------
                                   1023 ; absolute internal ram data
                                   1024 ;--------------------------------------------------------
                                   1025 	.area IABS    (ABS,DATA)
                                   1026 	.area IABS    (ABS,DATA)
                                   1027 ;--------------------------------------------------------
                                   1028 ; bit data
                                   1029 ;--------------------------------------------------------
                                   1030 	.area BSEG    (BIT)
                                   1031 ;--------------------------------------------------------
                                   1032 ; paged external ram data
                                   1033 ;--------------------------------------------------------
                                   1034 	.area PSEG    (PAG,XDATA)
                                   1035 ;--------------------------------------------------------
                                   1036 ; external ram data
                                   1037 ;--------------------------------------------------------
                                   1038 	.area XSEG    (XDATA)
                           000000  1039 LHW10.lcd_print$text$1$81==.
      000000                       1040 _lcd_print_text_1_81:
      000000                       1041 	.ds 80
                                   1042 ;--------------------------------------------------------
                                   1043 ; absolute external ram data
                                   1044 ;--------------------------------------------------------
                                   1045 	.area XABS    (ABS,XDATA)
                                   1046 ;--------------------------------------------------------
                                   1047 ; external initialized ram data
                                   1048 ;--------------------------------------------------------
                                   1049 	.area XISEG   (XDATA)
                                   1050 	.area HOME    (CODE)
                                   1051 	.area GSINIT0 (CODE)
                                   1052 	.area GSINIT1 (CODE)
                                   1053 	.area GSINIT2 (CODE)
                                   1054 	.area GSINIT3 (CODE)
                                   1055 	.area GSINIT4 (CODE)
                                   1056 	.area GSINIT5 (CODE)
                                   1057 	.area GSINIT  (CODE)
                                   1058 	.area GSFINAL (CODE)
                                   1059 	.area CSEG    (CODE)
                                   1060 ;--------------------------------------------------------
                                   1061 ; interrupt vector 
                                   1062 ;--------------------------------------------------------
                                   1063 	.area HOME    (CODE)
      000000                       1064 __interrupt_vect:
      000000 02r00r00         [24] 1065 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1066 	reti
      000004                       1067 	.ds	7
      00000B 32               [24] 1068 	reti
      00000C                       1069 	.ds	7
      000013 32               [24] 1070 	reti
      000014                       1071 	.ds	7
      00001B 32               [24] 1072 	reti
      00001C                       1073 	.ds	7
      000023 32               [24] 1074 	reti
      000024                       1075 	.ds	7
      00002B 32               [24] 1076 	reti
      00002C                       1077 	.ds	7
      000033 32               [24] 1078 	reti
      000034                       1079 	.ds	7
      00003B 32               [24] 1080 	reti
      00003C                       1081 	.ds	7
      000043 32               [24] 1082 	reti
      000044                       1083 	.ds	7
      00004B 02r05rAA         [24] 1084 	ljmp	_PCA_ISR
                                   1085 ;--------------------------------------------------------
                                   1086 ; global & static initialisations
                                   1087 ;--------------------------------------------------------
                                   1088 	.area HOME    (CODE)
                                   1089 	.area GSINIT  (CODE)
                                   1090 	.area GSFINAL (CODE)
                                   1091 	.area GSINIT  (CODE)
                                   1092 	.globl __sdcc_gsinit_startup
                                   1093 	.globl __sdcc_program_startup
                                   1094 	.globl __start__stack
                                   1095 	.globl __mcs51_genXINIT
                                   1096 	.globl __mcs51_genXRAMCLEAR
                                   1097 	.globl __mcs51_genRAMCLEAR
                           000000  1098 	C$HW10.c$20$1$139 ==.
                                   1099 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:20: unsigned int PCA_count = 0, counts = 0;
      000000 E4               [12] 1100 	clr	a
      000001 F5*14            [12] 1101 	mov	_PCA_count,a
      000003 F5*15            [12] 1102 	mov	(_PCA_count + 1),a
                           000005  1103 	C$HW10.c$20$1$139 ==.
                                   1104 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:20: unsigned char addr, start_reg, num_bytes, new_range, range, new_heading, heading;
      000005 F5*16            [12] 1105 	mov	_counts,a
      000007 F5*17            [12] 1106 	mov	(_counts + 1),a
                                   1107 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1108 	ljmp	__sdcc_program_startup
                                   1109 ;--------------------------------------------------------
                                   1110 ; Home
                                   1111 ;--------------------------------------------------------
                                   1112 	.area HOME    (CODE)
                                   1113 	.area HOME    (CODE)
      00004E                       1114 __sdcc_program_startup:
      00004E 02r05r02         [24] 1115 	ljmp	_main
                                   1116 ;	return from main will return to caller
                                   1117 ;--------------------------------------------------------
                                   1118 ; code
                                   1119 ;--------------------------------------------------------
                                   1120 	.area CSEG    (CODE)
                                   1121 ;------------------------------------------------------------
                                   1122 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1123 ;------------------------------------------------------------
                                   1124 ;i                         Allocated to registers r6 r7 
                                   1125 ;------------------------------------------------------------
                           000000  1126 	G$SYSCLK_Init$0$0 ==.
                           000000  1127 	C$c8051_SDCC.h$42$0$0 ==.
                                   1128 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1129 ;	-----------------------------------------
                                   1130 ;	 function SYSCLK_Init
                                   1131 ;	-----------------------------------------
      000000                       1132 _SYSCLK_Init:
                           000007  1133 	ar7 = 0x07
                           000006  1134 	ar6 = 0x06
                           000005  1135 	ar5 = 0x05
                           000004  1136 	ar4 = 0x04
                           000003  1137 	ar3 = 0x03
                           000002  1138 	ar2 = 0x02
                           000001  1139 	ar1 = 0x01
                           000000  1140 	ar0 = 0x00
                           000000  1141 	C$c8051_SDCC.h$46$1$2 ==.
                                   1142 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1143 	mov	_OSCXCN,#0x67
                           000003  1144 	C$c8051_SDCC.h$49$1$2 ==.
                                   1145 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1146 	mov	r6,#0x00
      000005 7F 01            [12] 1147 	mov	r7,#0x01
      000007                       1148 00107$:
      000007 EE               [12] 1149 	mov	a,r6
      000008 24 FF            [12] 1150 	add	a,#0xff
      00000A FC               [12] 1151 	mov	r4,a
      00000B EF               [12] 1152 	mov	a,r7
      00000C 34 FF            [12] 1153 	addc	a,#0xff
      00000E FD               [12] 1154 	mov	r5,a
      00000F 8C 06            [24] 1155 	mov	ar6,r4
      000011 8D 07            [24] 1156 	mov	ar7,r5
      000013 EC               [12] 1157 	mov	a,r4
      000014 4D               [12] 1158 	orl	a,r5
      000015 70 F0            [24] 1159 	jnz	00107$
                           000017  1160 	C$c8051_SDCC.h$51$1$2 ==.
                                   1161 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1162 00102$:
      000017 E5 B1            [12] 1163 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1164 	jnb	acc.7,00102$
                           00001C  1165 	C$c8051_SDCC.h$53$1$2 ==.
                                   1166 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1167 	mov	_OSCICN,#0x88
                           00001F  1168 	C$c8051_SDCC.h$56$1$2 ==.
                           00001F  1169 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1170 	ret
                                   1171 ;------------------------------------------------------------
                                   1172 ;Allocation info for local variables in function 'UART0_Init'
                                   1173 ;------------------------------------------------------------
                           000020  1174 	G$UART0_Init$0$0 ==.
                           000020  1175 	C$c8051_SDCC.h$64$1$2 ==.
                                   1176 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1177 ;	-----------------------------------------
                                   1178 ;	 function UART0_Init
                                   1179 ;	-----------------------------------------
      000020                       1180 _UART0_Init:
                           000020  1181 	C$c8051_SDCC.h$66$1$4 ==.
                                   1182 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1183 	mov	_SCON0,#0x50
                           000023  1184 	C$c8051_SDCC.h$67$1$4 ==.
                                   1185 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1186 	mov	_TMOD,#0x20
                           000026  1187 	C$c8051_SDCC.h$68$1$4 ==.
                                   1188 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1189 	mov	_TH1,#0xdc
                           000029  1190 	C$c8051_SDCC.h$69$1$4 ==.
                                   1191 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1192 	setb	_TR1
                           00002B  1193 	C$c8051_SDCC.h$70$1$4 ==.
                                   1194 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1195 	orl	_CKCON,#0x10
                           00002E  1196 	C$c8051_SDCC.h$71$1$4 ==.
                                   1197 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1198 	orl	_PCON,#0x80
                           000031  1199 	C$c8051_SDCC.h$73$1$4 ==.
                                   1200 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1201 	setb	_TI0
                           000033  1202 	C$c8051_SDCC.h$74$1$4 ==.
                                   1203 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1204 	orl	_P0MDOUT,#0x01
                           000036  1205 	C$c8051_SDCC.h$75$1$4 ==.
                           000036  1206 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1207 	ret
                                   1208 ;------------------------------------------------------------
                                   1209 ;Allocation info for local variables in function 'Sys_Init'
                                   1210 ;------------------------------------------------------------
                           000037  1211 	G$Sys_Init$0$0 ==.
                           000037  1212 	C$c8051_SDCC.h$83$1$4 ==.
                                   1213 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1214 ;	-----------------------------------------
                                   1215 ;	 function Sys_Init
                                   1216 ;	-----------------------------------------
      000037                       1217 _Sys_Init:
                           000037  1218 	C$c8051_SDCC.h$85$1$6 ==.
                                   1219 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1220 	mov	_WDTCN,#0xde
                           00003A  1221 	C$c8051_SDCC.h$86$1$6 ==.
                                   1222 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1223 	mov	_WDTCN,#0xad
                           00003D  1224 	C$c8051_SDCC.h$88$1$6 ==.
                                   1225 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1226 	lcall	_SYSCLK_Init
                           000040  1227 	C$c8051_SDCC.h$89$1$6 ==.
                                   1228 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1229 	lcall	_UART0_Init
                           000043  1230 	C$c8051_SDCC.h$91$1$6 ==.
                                   1231 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1232 	orl	_XBR0,#0x04
                           000046  1233 	C$c8051_SDCC.h$92$1$6 ==.
                                   1234 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1235 	orl	_XBR2,#0x40
                           000049  1236 	C$c8051_SDCC.h$93$1$6 ==.
                           000049  1237 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1238 	ret
                                   1239 ;------------------------------------------------------------
                                   1240 ;Allocation info for local variables in function 'putchar'
                                   1241 ;------------------------------------------------------------
                                   1242 ;c                         Allocated to registers r7 
                                   1243 ;------------------------------------------------------------
                           00004A  1244 	G$putchar$0$0 ==.
                           00004A  1245 	C$c8051_SDCC.h$98$1$6 ==.
                                   1246 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function putchar
                                   1249 ;	-----------------------------------------
      00004A                       1250 _putchar:
      00004A AF 82            [24] 1251 	mov	r7,dpl
                           00004C  1252 	C$c8051_SDCC.h$100$1$8 ==.
                                   1253 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      00004C                       1254 00101$:
                           00004C  1255 	C$c8051_SDCC.h$101$1$8 ==.
                                   1256 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      00004C 10 99 02         [24] 1257 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1258 	sjmp	00101$
      000051                       1259 00112$:
                           000051  1260 	C$c8051_SDCC.h$102$1$8 ==.
                                   1261 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      000051 8F 99            [24] 1262 	mov	_SBUF0,r7
                           000053  1263 	C$c8051_SDCC.h$103$1$8 ==.
                           000053  1264 	XG$putchar$0$0 ==.
      000053 22               [24] 1265 	ret
                                   1266 ;------------------------------------------------------------
                                   1267 ;Allocation info for local variables in function 'getchar'
                                   1268 ;------------------------------------------------------------
                                   1269 ;c                         Allocated to registers 
                                   1270 ;------------------------------------------------------------
                           000054  1271 	G$getchar$0$0 ==.
                           000054  1272 	C$c8051_SDCC.h$108$1$8 ==.
                                   1273 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1274 ;	-----------------------------------------
                                   1275 ;	 function getchar
                                   1276 ;	-----------------------------------------
      000054                       1277 _getchar:
                           000054  1278 	C$c8051_SDCC.h$111$1$10 ==.
                                   1279 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      000054                       1280 00101$:
                           000054  1281 	C$c8051_SDCC.h$112$1$10 ==.
                                   1282 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      000054 10 98 02         [24] 1283 	jbc	_RI0,00112$
      000057 80 FB            [24] 1284 	sjmp	00101$
      000059                       1285 00112$:
                           000059  1286 	C$c8051_SDCC.h$113$1$10 ==.
                                   1287 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000059 85 99 82         [24] 1288 	mov	dpl,_SBUF0
                           00005C  1289 	C$c8051_SDCC.h$114$1$10 ==.
                                   1290 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      00005C 12r00r4A         [24] 1291 	lcall	_putchar
                           00005F  1292 	C$c8051_SDCC.h$115$1$10 ==.
                                   1293 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      00005F 85 99 82         [24] 1294 	mov	dpl,_SBUF0
                           000062  1295 	C$c8051_SDCC.h$116$1$10 ==.
                           000062  1296 	XG$getchar$0$0 ==.
      000062 22               [24] 1297 	ret
                                   1298 ;------------------------------------------------------------
                                   1299 ;Allocation info for local variables in function 'getchar_nw'
                                   1300 ;------------------------------------------------------------
                                   1301 ;c                         Allocated to registers 
                                   1302 ;------------------------------------------------------------
                           000063  1303 	G$getchar_nw$0$0 ==.
                           000063  1304 	C$c8051_SDCC.h$121$1$10 ==.
                                   1305 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:121: char getchar_nw(void)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function getchar_nw
                                   1308 ;	-----------------------------------------
      000063                       1309 _getchar_nw:
                           000063  1310 	C$c8051_SDCC.h$124$1$12 ==.
                                   1311 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:124: if (!RI0) return 0xFF;
      000063 20 98 05         [24] 1312 	jb	_RI0,00102$
      000066 75 82 FF         [24] 1313 	mov	dpl,#0xff
      000069 80 0B            [24] 1314 	sjmp	00104$
      00006B                       1315 00102$:
                           00006B  1316 	C$c8051_SDCC.h$127$2$13 ==.
                                   1317 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:127: RI0 = 0;
      00006B C2 98            [12] 1318 	clr	_RI0
                           00006D  1319 	C$c8051_SDCC.h$128$2$13 ==.
                                   1320 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:128: c = SBUF0;
      00006D 85 99 82         [24] 1321 	mov	dpl,_SBUF0
                           000070  1322 	C$c8051_SDCC.h$129$2$13 ==.
                                   1323 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: putchar(c);                          // echo to terminal
      000070 12r00r4A         [24] 1324 	lcall	_putchar
                           000073  1325 	C$c8051_SDCC.h$130$2$13 ==.
                                   1326 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:130: return SBUF0;
      000073 85 99 82         [24] 1327 	mov	dpl,_SBUF0
      000076                       1328 00104$:
                           000076  1329 	C$c8051_SDCC.h$132$1$12 ==.
                           000076  1330 	XG$getchar_nw$0$0 ==.
      000076 22               [24] 1331 	ret
                                   1332 ;------------------------------------------------------------
                                   1333 ;Allocation info for local variables in function 'lcd_print'
                                   1334 ;------------------------------------------------------------
                                   1335 ;fmt                       Allocated to stack - _bp -5
                                   1336 ;len                       Allocated to registers r6 
                                   1337 ;i                         Allocated to registers 
                                   1338 ;ap                        Allocated to registers 
                                   1339 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1340 ;------------------------------------------------------------
                           000077  1341 	G$lcd_print$0$0 ==.
                           000077  1342 	C$i2c.h$84$1$12 ==.
                                   1343 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1344 ;	-----------------------------------------
                                   1345 ;	 function lcd_print
                                   1346 ;	-----------------------------------------
      000077                       1347 _lcd_print:
      000077 C0*00            [24] 1348 	push	_bp
      000079 85 81*00         [24] 1349 	mov	_bp,sp
                           00007C  1350 	C$i2c.h$90$1$81 ==.
                                   1351 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      00007C E5*00            [12] 1352 	mov	a,_bp
      00007E 24 FB            [12] 1353 	add	a,#0xfb
      000080 F8               [12] 1354 	mov	r0,a
      000081 86 82            [24] 1355 	mov	dpl,@r0
      000083 08               [12] 1356 	inc	r0
      000084 86 83            [24] 1357 	mov	dph,@r0
      000086 08               [12] 1358 	inc	r0
      000087 86 F0            [24] 1359 	mov	b,@r0
      000089 12r00r00         [24] 1360 	lcall	_strlen
      00008C E5 82            [12] 1361 	mov	a,dpl
      00008E 85 83 F0         [24] 1362 	mov	b,dph
      000091 45 F0            [12] 1363 	orl	a,b
      000093 70 02            [24] 1364 	jnz	00102$
      000095 80 62            [24] 1365 	sjmp	00109$
      000097                       1366 00102$:
                           000097  1367 	C$i2c.h$92$2$82 ==.
                                   1368 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      000097 E5*00            [12] 1369 	mov	a,_bp
      000099 24 FB            [12] 1370 	add	a,#0xfb
      00009B FF               [12] 1371 	mov	r7,a
      00009C 8F*00            [24] 1372 	mov	_vsprintf_PARM_3,r7
                           00009E  1373 	C$i2c.h$93$1$81 ==.
                                   1374 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      00009E E5*00            [12] 1375 	mov	a,_bp
      0000A0 24 FB            [12] 1376 	add	a,#0xfb
      0000A2 F8               [12] 1377 	mov	r0,a
      0000A3 86*00            [24] 1378 	mov	_vsprintf_PARM_2,@r0
      0000A5 08               [12] 1379 	inc	r0
      0000A6 86*01            [24] 1380 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000A8 08               [12] 1381 	inc	r0
      0000A9 86*02            [24] 1382 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AB 90r00r00         [24] 1383 	mov	dptr,#_lcd_print_text_1_81
      0000AE 75 F0 00         [24] 1384 	mov	b,#0x00
      0000B1 12r00r00         [24] 1385 	lcall	_vsprintf
                           0000B4  1386 	C$i2c.h$96$1$81 ==.
                                   1387 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B4 90r00r00         [24] 1388 	mov	dptr,#_lcd_print_text_1_81
      0000B7 75 F0 00         [24] 1389 	mov	b,#0x00
      0000BA 12r00r00         [24] 1390 	lcall	_strlen
      0000BD AE 82            [24] 1391 	mov	r6,dpl
                           0000BF  1392 	C$i2c.h$97$1$81 ==.
                                   1393 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000BF 7F 00            [12] 1394 	mov	r7,#0x00
      0000C1                       1395 00107$:
      0000C1 C3               [12] 1396 	clr	c
      0000C2 EF               [12] 1397 	mov	a,r7
      0000C3 9E               [12] 1398 	subb	a,r6
      0000C4 50 1F            [24] 1399 	jnc	00105$
                           0000C6  1400 	C$i2c.h$99$2$84 ==.
                                   1401 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000C6 EF               [12] 1402 	mov	a,r7
      0000C7 24r00            [12] 1403 	add	a,#_lcd_print_text_1_81
      0000C9 F5 82            [12] 1404 	mov	dpl,a
      0000CB E4               [12] 1405 	clr	a
      0000CC 34s00            [12] 1406 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000CE F5 83            [12] 1407 	mov	dph,a
      0000D0 E0               [24] 1408 	movx	a,@dptr
      0000D1 FD               [12] 1409 	mov	r5,a
      0000D2 BD 0A 0D         [24] 1410 	cjne	r5,#0x0a,00108$
      0000D5 EF               [12] 1411 	mov	a,r7
      0000D6 24r00            [12] 1412 	add	a,#_lcd_print_text_1_81
      0000D8 F5 82            [12] 1413 	mov	dpl,a
      0000DA E4               [12] 1414 	clr	a
      0000DB 34s00            [12] 1415 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000DD F5 83            [12] 1416 	mov	dph,a
      0000DF 74 0D            [12] 1417 	mov	a,#0x0d
      0000E1 F0               [24] 1418 	movx	@dptr,a
      0000E2                       1419 00108$:
                           0000E2  1420 	C$i2c.h$97$1$81 ==.
                                   1421 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E2 0F               [12] 1422 	inc	r7
      0000E3 80 DC            [24] 1423 	sjmp	00107$
      0000E5                       1424 00105$:
                           0000E5  1425 	C$i2c.h$102$1$81 ==.
                                   1426 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E5 75*0Br00         [24] 1427 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000E8 75*0Cs00         [24] 1428 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EB 75*0D 00         [24] 1429 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000EE 75*0A 00         [24] 1430 	mov	_i2c_write_data_PARM_2,#0x00
      0000F1 8E*0E            [24] 1431 	mov	_i2c_write_data_PARM_4,r6
      0000F3 75 82 C6         [24] 1432 	mov	dpl,#0xc6
      0000F6 12r03r88         [24] 1433 	lcall	_i2c_write_data
      0000F9                       1434 00109$:
      0000F9 D0*00            [24] 1435 	pop	_bp
                           0000FB  1436 	C$i2c.h$103$1$81 ==.
                           0000FB  1437 	XG$lcd_print$0$0 ==.
      0000FB 22               [24] 1438 	ret
                                   1439 ;------------------------------------------------------------
                                   1440 ;Allocation info for local variables in function 'lcd_clear'
                                   1441 ;------------------------------------------------------------
                                   1442 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1443 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1444 ;------------------------------------------------------------
                           0000FC  1445 	G$lcd_clear$0$0 ==.
                           0000FC  1446 	C$i2c.h$106$1$81 ==.
                                   1447 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1448 ;	-----------------------------------------
                                   1449 ;	 function lcd_clear
                                   1450 ;	-----------------------------------------
      0000FC                       1451 _lcd_clear:
                           0000FC  1452 	C$i2c.h$108$1$81 ==.
                                   1453 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      0000FC 75*05 00         [24] 1454 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           0000FF  1455 	C$i2c.h$110$1$85 ==.
                                   1456 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000FF                       1457 00101$:
      0000FF 74 C0            [12] 1458 	mov	a,#0x100 - 0x40
      000101 25*05            [12] 1459 	add	a,_lcd_clear_NumBytes_1_85
      000103 40 17            [24] 1460 	jc	00103$
      000105 75*10r05         [24] 1461 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      000108 75*11 00         [24] 1462 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010B 75*12 40         [24] 1463 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00010E 75*0F 00         [24] 1464 	mov	_i2c_read_data_PARM_2,#0x00
      000111 75*13 01         [24] 1465 	mov	_i2c_read_data_PARM_4,#0x01
      000114 75 82 C6         [24] 1466 	mov	dpl,#0xc6
      000117 12r04r02         [24] 1467 	lcall	_i2c_read_data
      00011A 80 E3            [24] 1468 	sjmp	00101$
      00011C                       1469 00103$:
                           00011C  1470 	C$i2c.h$112$1$85 ==.
                                   1471 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      00011C 75*06 0C         [24] 1472 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           00011F  1473 	C$i2c.h$113$1$85 ==.
                                   1474 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      00011F 75*0Br06         [24] 1475 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000122 75*0C 00         [24] 1476 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000125 75*0D 40         [24] 1477 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000128 75*0A 00         [24] 1478 	mov	_i2c_write_data_PARM_2,#0x00
      00012B 75*0E 01         [24] 1479 	mov	_i2c_write_data_PARM_4,#0x01
      00012E 75 82 C6         [24] 1480 	mov	dpl,#0xc6
      000131 12r03r88         [24] 1481 	lcall	_i2c_write_data
                           000134  1482 	C$i2c.h$114$1$85 ==.
                           000134  1483 	XG$lcd_clear$0$0 ==.
      000134 22               [24] 1484 	ret
                                   1485 ;------------------------------------------------------------
                                   1486 ;Allocation info for local variables in function 'read_keypad'
                                   1487 ;------------------------------------------------------------
                                   1488 ;i                         Allocated to registers r7 
                                   1489 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1490 ;------------------------------------------------------------
                           000135  1491 	G$read_keypad$0$0 ==.
                           000135  1492 	C$i2c.h$117$1$85 ==.
                                   1493 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1494 ;	-----------------------------------------
                                   1495 ;	 function read_keypad
                                   1496 ;	-----------------------------------------
      000135                       1497 _read_keypad:
                           000135  1498 	C$i2c.h$121$1$86 ==.
                                   1499 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000135 75*10r08         [24] 1500 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      000138 75*11 00         [24] 1501 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013B 75*12 40         [24] 1502 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00013E 75*0F 01         [24] 1503 	mov	_i2c_read_data_PARM_2,#0x01
      000141 75*13 02         [24] 1504 	mov	_i2c_read_data_PARM_4,#0x02
      000144 75 82 C6         [24] 1505 	mov	dpl,#0xc6
      000147 12r04r02         [24] 1506 	lcall	_i2c_read_data
                           00014A  1507 	C$i2c.h$122$1$86 ==.
                                   1508 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00014A 74 FF            [12] 1509 	mov	a,#0xff
      00014C B5*08 05         [24] 1510 	cjne	a,_read_keypad_Data_1_86,00102$
      00014F 75 82 00         [24] 1511 	mov	dpl,#0x00
      000152 80 5F            [24] 1512 	sjmp	00116$
      000154                       1513 00102$:
                           000154  1514 	C$i2c.h$124$1$86 ==.
                                   1515 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)             //loop 8 times
      000154 7F 00            [12] 1516 	mov	r7,#0x00
      000156 8F 06            [24] 1517 	mov	ar6,r7
      000158                       1518 00114$:
                           000158  1519 	C$i2c.h$126$2$87 ==.
                                   1520 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      000158 8E F0            [24] 1521 	mov	b,r6
      00015A 05 F0            [12] 1522 	inc	b
      00015C 7C 01            [12] 1523 	mov	r4,#0x01
      00015E 7D 00            [12] 1524 	mov	r5,#0x00
      000160 80 06            [24] 1525 	sjmp	00145$
      000162                       1526 00144$:
      000162 EC               [12] 1527 	mov	a,r4
      000163 2C               [12] 1528 	add	a,r4
      000164 FC               [12] 1529 	mov	r4,a
      000165 ED               [12] 1530 	mov	a,r5
      000166 33               [12] 1531 	rlc	a
      000167 FD               [12] 1532 	mov	r5,a
      000168                       1533 00145$:
      000168 D5 F0 F7         [24] 1534 	djnz	b,00144$
      00016B AA*08            [24] 1535 	mov	r2,_read_keypad_Data_1_86
      00016D 7B 00            [12] 1536 	mov	r3,#0x00
      00016F EA               [12] 1537 	mov	a,r2
      000170 52 04            [12] 1538 	anl	ar4,a
      000172 EB               [12] 1539 	mov	a,r3
      000173 52 05            [12] 1540 	anl	ar5,a
      000175 EC               [12] 1541 	mov	a,r4
      000176 4D               [12] 1542 	orl	a,r5
      000177 60 07            [24] 1543 	jz	00115$
                           000179  1544 	C$i2c.h$127$2$87 ==.
                                   1545 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      000179 74 31            [12] 1546 	mov	a,#0x31
      00017B 2F               [12] 1547 	add	a,r7
      00017C F5 82            [12] 1548 	mov	dpl,a
      00017E 80 33            [24] 1549 	sjmp	00116$
      000180                       1550 00115$:
                           000180  1551 	C$i2c.h$124$1$86 ==.
                                   1552 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)             //loop 8 times
      000180 0E               [12] 1553 	inc	r6
      000181 8E 07            [24] 1554 	mov	ar7,r6
      000183 BE 08 00         [24] 1555 	cjne	r6,#0x08,00147$
      000186                       1556 00147$:
      000186 40 D0            [24] 1557 	jc	00114$
                           000188  1558 	C$i2c.h$130$1$86 ==.
                                   1559 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      000188 E5*09            [12] 1560 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018A 30 E0 05         [24] 1561 	jnb	acc.0,00107$
      00018D 75 82 39         [24] 1562 	mov	dpl,#0x39
      000190 80 21            [24] 1563 	sjmp	00116$
      000192                       1564 00107$:
                           000192  1565 	C$i2c.h$132$1$86 ==.
                                   1566 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000192 E5*09            [12] 1567 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000194 30 E1 05         [24] 1568 	jnb	acc.1,00109$
      000197 75 82 2A         [24] 1569 	mov	dpl,#0x2a
      00019A 80 17            [24] 1570 	sjmp	00116$
      00019C                       1571 00109$:
                           00019C  1572 	C$i2c.h$134$1$86 ==.
                                   1573 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      00019C E5*09            [12] 1574 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00019E 30 E2 05         [24] 1575 	jnb	acc.2,00111$
      0001A1 75 82 30         [24] 1576 	mov	dpl,#0x30
      0001A4 80 0D            [24] 1577 	sjmp	00116$
      0001A6                       1578 00111$:
                           0001A6  1579 	C$i2c.h$136$1$86 ==.
                                   1580 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      0001A6 E5*09            [12] 1581 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A8 30 E3 05         [24] 1582 	jnb	acc.3,00113$
      0001AB 75 82 23         [24] 1583 	mov	dpl,#0x23
      0001AE 80 03            [24] 1584 	sjmp	00116$
      0001B0                       1585 00113$:
                           0001B0  1586 	C$i2c.h$138$1$86 ==.
                                   1587 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                   //else return a numerical -1 (0xFF)
      0001B0 75 82 FF         [24] 1588 	mov	dpl,#0xff
      0001B3                       1589 00116$:
                           0001B3  1590 	C$i2c.h$139$1$86 ==.
                           0001B3  1591 	XG$read_keypad$0$0 ==.
      0001B3 22               [24] 1592 	ret
                                   1593 ;------------------------------------------------------------
                                   1594 ;Allocation info for local variables in function 'kpd_input'
                                   1595 ;------------------------------------------------------------
                                   1596 ;mode                      Allocated to registers r7 
                                   1597 ;sum                       Allocated to registers r5 r6 
                                   1598 ;key                       Allocated to registers r3 
                                   1599 ;i                         Allocated to registers 
                                   1600 ;------------------------------------------------------------
                           0001B4  1601 	G$kpd_input$0$0 ==.
                           0001B4  1602 	C$i2c.h$151$1$86 ==.
                                   1603 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1604 ;	-----------------------------------------
                                   1605 ;	 function kpd_input
                                   1606 ;	-----------------------------------------
      0001B4                       1607 _kpd_input:
      0001B4 AF 82            [24] 1608 	mov	r7,dpl
                           0001B6  1609 	C$i2c.h$156$1$89 ==.
                                   1610 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001B6  1611 	C$i2c.h$159$1$89 ==.
                                   1612 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001B6 E4               [12] 1613 	clr	a
      0001B7 FD               [12] 1614 	mov	r5,a
      0001B8 FE               [12] 1615 	mov	r6,a
      0001B9 EF               [12] 1616 	mov	a,r7
      0001BA 70 1D            [24] 1617 	jnz	00102$
      0001BC C0 06            [24] 1618 	push	ar6
      0001BE C0 05            [24] 1619 	push	ar5
      0001C0 74r00            [12] 1620 	mov	a,#___str_0
      0001C2 C0 E0            [24] 1621 	push	acc
      0001C4 74s00            [12] 1622 	mov	a,#(___str_0 >> 8)
      0001C6 C0 E0            [24] 1623 	push	acc
      0001C8 74 80            [12] 1624 	mov	a,#0x80
      0001CA C0 E0            [24] 1625 	push	acc
      0001CC 12r00r77         [24] 1626 	lcall	_lcd_print
      0001CF 15 81            [12] 1627 	dec	sp
      0001D1 15 81            [12] 1628 	dec	sp
      0001D3 15 81            [12] 1629 	dec	sp
      0001D5 D0 05            [24] 1630 	pop	ar5
      0001D7 D0 06            [24] 1631 	pop	ar6
      0001D9                       1632 00102$:
                           0001D9  1633 	C$i2c.h$161$1$89 ==.
                                   1634 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001D9 C0 06            [24] 1635 	push	ar6
      0001DB C0 05            [24] 1636 	push	ar5
      0001DD 74 08            [12] 1637 	mov	a,#0x08
      0001DF C0 E0            [24] 1638 	push	acc
      0001E1 E4               [12] 1639 	clr	a
      0001E2 C0 E0            [24] 1640 	push	acc
      0001E4 74 08            [12] 1641 	mov	a,#0x08
      0001E6 C0 E0            [24] 1642 	push	acc
      0001E8 E4               [12] 1643 	clr	a
      0001E9 C0 E0            [24] 1644 	push	acc
      0001EB 74 08            [12] 1645 	mov	a,#0x08
      0001ED C0 E0            [24] 1646 	push	acc
      0001EF E4               [12] 1647 	clr	a
      0001F0 C0 E0            [24] 1648 	push	acc
      0001F2 74 08            [12] 1649 	mov	a,#0x08
      0001F4 C0 E0            [24] 1650 	push	acc
      0001F6 E4               [12] 1651 	clr	a
      0001F7 C0 E0            [24] 1652 	push	acc
      0001F9 74 08            [12] 1653 	mov	a,#0x08
      0001FB C0 E0            [24] 1654 	push	acc
      0001FD E4               [12] 1655 	clr	a
      0001FE C0 E0            [24] 1656 	push	acc
      000200 74r16            [12] 1657 	mov	a,#___str_1
      000202 C0 E0            [24] 1658 	push	acc
      000204 74s00            [12] 1659 	mov	a,#(___str_1 >> 8)
      000206 C0 E0            [24] 1660 	push	acc
      000208 74 80            [12] 1661 	mov	a,#0x80
      00020A C0 E0            [24] 1662 	push	acc
      00020C 12r00r77         [24] 1663 	lcall	_lcd_print
      00020F E5 81            [12] 1664 	mov	a,sp
      000211 24 F3            [12] 1665 	add	a,#0xf3
      000213 F5 81            [12] 1666 	mov	sp,a
                           000215  1667 	C$i2c.h$163$1$89 ==.
                                   1668 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      000215 90 A1 20         [24] 1669 	mov	dptr,#0xa120
      000218 75 F0 07         [24] 1670 	mov	b,#0x07
      00021B E4               [12] 1671 	clr	a
      00021C 12r03r23         [24] 1672 	lcall	_delay_time
      00021F D0 05            [24] 1673 	pop	ar5
      000221 D0 06            [24] 1674 	pop	ar6
                           000223  1675 	C$i2c.h$167$1$89 ==.
                                   1676 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000223 7F 00            [12] 1677 	mov	r7,#0x00
                           000225  1678 	C$i2c.h$169$3$92 ==.
                                   1679 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000225                       1680 00104$:
      000225 C0 07            [24] 1681 	push	ar7
      000227 C0 06            [24] 1682 	push	ar6
      000229 C0 05            [24] 1683 	push	ar5
      00022B 12r01r35         [24] 1684 	lcall	_read_keypad
      00022E AC 82            [24] 1685 	mov	r4,dpl
      000230 D0 05            [24] 1686 	pop	ar5
      000232 D0 06            [24] 1687 	pop	ar6
      000234 D0 07            [24] 1688 	pop	ar7
      000236 8C 03            [24] 1689 	mov	ar3,r4
      000238 BC FF 02         [24] 1690 	cjne	r4,#0xff,00146$
      00023B 80 03            [24] 1691 	sjmp	00105$
      00023D                       1692 00146$:
      00023D BB 2A 17         [24] 1693 	cjne	r3,#0x2a,00106$
      000240                       1694 00105$:
      000240 90 27 10         [24] 1695 	mov	dptr,#0x2710
      000243 E4               [12] 1696 	clr	a
      000244 F5 F0            [12] 1697 	mov	b,a
      000246 C0 07            [24] 1698 	push	ar7
      000248 C0 06            [24] 1699 	push	ar6
      00024A C0 05            [24] 1700 	push	ar5
      00024C 12r03r23         [24] 1701 	lcall	_delay_time
      00024F D0 05            [24] 1702 	pop	ar5
      000251 D0 06            [24] 1703 	pop	ar6
      000253 D0 07            [24] 1704 	pop	ar7
      000255 80 CE            [24] 1705 	sjmp	00104$
      000257                       1706 00106$:
                           000257  1707 	C$i2c.h$170$2$90 ==.
                                   1708 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      000257 BB 23 2A         [24] 1709 	cjne	r3,#0x23,00114$
                           00025A  1710 	C$i2c.h$172$3$91 ==.
                                   1711 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025A                       1712 00107$:
      00025A C0 06            [24] 1713 	push	ar6
      00025C C0 05            [24] 1714 	push	ar5
      00025E 12r01r35         [24] 1715 	lcall	_read_keypad
      000261 AC 82            [24] 1716 	mov	r4,dpl
      000263 D0 05            [24] 1717 	pop	ar5
      000265 D0 06            [24] 1718 	pop	ar6
      000267 BC 23 13         [24] 1719 	cjne	r4,#0x23,00109$
      00026A 90 27 10         [24] 1720 	mov	dptr,#0x2710
      00026D E4               [12] 1721 	clr	a
      00026E F5 F0            [12] 1722 	mov	b,a
      000270 C0 06            [24] 1723 	push	ar6
      000272 C0 05            [24] 1724 	push	ar5
      000274 12r03r23         [24] 1725 	lcall	_delay_time
      000277 D0 05            [24] 1726 	pop	ar5
      000279 D0 06            [24] 1727 	pop	ar6
      00027B 80 DD            [24] 1728 	sjmp	00107$
      00027D                       1729 00109$:
                           00027D  1730 	C$i2c.h$173$3$91 ==.
                                   1731 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      00027D 8D 82            [24] 1732 	mov	dpl,r5
      00027F 8E 83            [24] 1733 	mov	dph,r6
      000281 02r03r22         [24] 1734 	ljmp	00119$
      000284                       1735 00114$:
                           000284  1736 	C$i2c.h$177$3$92 ==.
                                   1737 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000284 8B 02            [24] 1738 	mov	ar2,r3
      000286 7C 00            [12] 1739 	mov	r4,#0x00
      000288 C0 07            [24] 1740 	push	ar7
      00028A C0 06            [24] 1741 	push	ar6
      00028C C0 05            [24] 1742 	push	ar5
      00028E C0 04            [24] 1743 	push	ar4
      000290 C0 03            [24] 1744 	push	ar3
      000292 C0 02            [24] 1745 	push	ar2
      000294 C0 02            [24] 1746 	push	ar2
      000296 C0 04            [24] 1747 	push	ar4
      000298 74r26            [12] 1748 	mov	a,#___str_2
      00029A C0 E0            [24] 1749 	push	acc
      00029C 74s00            [12] 1750 	mov	a,#(___str_2 >> 8)
      00029E C0 E0            [24] 1751 	push	acc
      0002A0 74 80            [12] 1752 	mov	a,#0x80
      0002A2 C0 E0            [24] 1753 	push	acc
      0002A4 12r00r77         [24] 1754 	lcall	_lcd_print
      0002A7 E5 81            [12] 1755 	mov	a,sp
      0002A9 24 FB            [12] 1756 	add	a,#0xfb
      0002AB F5 81            [12] 1757 	mov	sp,a
      0002AD D0 02            [24] 1758 	pop	ar2
      0002AF D0 03            [24] 1759 	pop	ar3
      0002B1 D0 04            [24] 1760 	pop	ar4
      0002B3 D0 05            [24] 1761 	pop	ar5
      0002B5 D0 06            [24] 1762 	pop	ar6
                           0002B7  1763 	C$i2c.h$178$1$89 ==.
                                   1764 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002B7 8D*00            [24] 1765 	mov	__mulint_PARM_2,r5
      0002B9 8E*01            [24] 1766 	mov	(__mulint_PARM_2 + 1),r6
      0002BB 90 00 0A         [24] 1767 	mov	dptr,#0x000a
      0002BE C0 04            [24] 1768 	push	ar4
      0002C0 C0 03            [24] 1769 	push	ar3
      0002C2 C0 02            [24] 1770 	push	ar2
      0002C4 12r00r00         [24] 1771 	lcall	__mulint
      0002C7 A8 82            [24] 1772 	mov	r0,dpl
      0002C9 A9 83            [24] 1773 	mov	r1,dph
      0002CB D0 02            [24] 1774 	pop	ar2
      0002CD D0 03            [24] 1775 	pop	ar3
      0002CF D0 04            [24] 1776 	pop	ar4
      0002D1 D0 07            [24] 1777 	pop	ar7
      0002D3 EA               [12] 1778 	mov	a,r2
      0002D4 28               [12] 1779 	add	a,r0
      0002D5 F8               [12] 1780 	mov	r0,a
      0002D6 EC               [12] 1781 	mov	a,r4
      0002D7 39               [12] 1782 	addc	a,r1
      0002D8 F9               [12] 1783 	mov	r1,a
      0002D9 E8               [12] 1784 	mov	a,r0
      0002DA 24 D0            [12] 1785 	add	a,#0xd0
      0002DC FD               [12] 1786 	mov	r5,a
      0002DD E9               [12] 1787 	mov	a,r1
      0002DE 34 FF            [12] 1788 	addc	a,#0xff
      0002E0 FE               [12] 1789 	mov	r6,a
                           0002E1  1790 	C$i2c.h$179$3$92 ==.
                                   1791 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E1                       1792 00110$:
      0002E1 C0 07            [24] 1793 	push	ar7
      0002E3 C0 06            [24] 1794 	push	ar6
      0002E5 C0 05            [24] 1795 	push	ar5
      0002E7 C0 03            [24] 1796 	push	ar3
      0002E9 12r01r35         [24] 1797 	lcall	_read_keypad
      0002EC AC 82            [24] 1798 	mov	r4,dpl
      0002EE D0 03            [24] 1799 	pop	ar3
      0002F0 D0 05            [24] 1800 	pop	ar5
      0002F2 D0 06            [24] 1801 	pop	ar6
      0002F4 D0 07            [24] 1802 	pop	ar7
      0002F6 EC               [12] 1803 	mov	a,r4
      0002F7 B5 03 1B         [24] 1804 	cjne	a,ar3,00118$
      0002FA 90 27 10         [24] 1805 	mov	dptr,#0x2710
      0002FD E4               [12] 1806 	clr	a
      0002FE F5 F0            [12] 1807 	mov	b,a
      000300 C0 07            [24] 1808 	push	ar7
      000302 C0 06            [24] 1809 	push	ar6
      000304 C0 05            [24] 1810 	push	ar5
      000306 C0 03            [24] 1811 	push	ar3
      000308 12r03r23         [24] 1812 	lcall	_delay_time
      00030B D0 03            [24] 1813 	pop	ar3
      00030D D0 05            [24] 1814 	pop	ar5
      00030F D0 06            [24] 1815 	pop	ar6
      000311 D0 07            [24] 1816 	pop	ar7
      000313 80 CC            [24] 1817 	sjmp	00110$
      000315                       1818 00118$:
                           000315  1819 	C$i2c.h$167$1$89 ==.
                                   1820 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000315 0F               [12] 1821 	inc	r7
      000316 BF 05 00         [24] 1822 	cjne	r7,#0x05,00155$
      000319                       1823 00155$:
      000319 50 03            [24] 1824 	jnc	00156$
      00031B 02r02r25         [24] 1825 	ljmp	00104$
      00031E                       1826 00156$:
                           00031E  1827 	C$i2c.h$182$1$89 ==.
                                   1828 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      00031E 8D 82            [24] 1829 	mov	dpl,r5
      000320 8E 83            [24] 1830 	mov	dph,r6
      000322                       1831 00119$:
                           000322  1832 	C$i2c.h$183$1$89 ==.
                           000322  1833 	XG$kpd_input$0$0 ==.
      000322 22               [24] 1834 	ret
                                   1835 ;------------------------------------------------------------
                                   1836 ;Allocation info for local variables in function 'delay_time'
                                   1837 ;------------------------------------------------------------
                                   1838 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1839 ;index                     Allocated to registers 
                                   1840 ;------------------------------------------------------------
                           000323  1841 	G$delay_time$0$0 ==.
                           000323  1842 	C$i2c.h$192$1$89 ==.
                                   1843 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1844 ;	-----------------------------------------
                                   1845 ;	 function delay_time
                                   1846 ;	-----------------------------------------
      000323                       1847 _delay_time:
      000323 AC 82            [24] 1848 	mov	r4,dpl
      000325 AD 83            [24] 1849 	mov	r5,dph
      000327 AE F0            [24] 1850 	mov	r6,b
      000329 FF               [12] 1851 	mov	r7,a
                           00032A  1852 	C$i2c.h$195$1$94 ==.
                                   1853 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:195: for (index = 0; index < time_end; index++); //for loop delay
      00032A 78 00            [12] 1854 	mov	r0,#0x00
      00032C 79 00            [12] 1855 	mov	r1,#0x00
      00032E 7A 00            [12] 1856 	mov	r2,#0x00
      000330 7B 00            [12] 1857 	mov	r3,#0x00
      000332                       1858 00103$:
      000332 C3               [12] 1859 	clr	c
      000333 E8               [12] 1860 	mov	a,r0
      000334 9C               [12] 1861 	subb	a,r4
      000335 E9               [12] 1862 	mov	a,r1
      000336 9D               [12] 1863 	subb	a,r5
      000337 EA               [12] 1864 	mov	a,r2
      000338 9E               [12] 1865 	subb	a,r6
      000339 EB               [12] 1866 	mov	a,r3
      00033A 9F               [12] 1867 	subb	a,r7
      00033B 50 0F            [24] 1868 	jnc	00105$
      00033D 08               [12] 1869 	inc	r0
      00033E B8 00 09         [24] 1870 	cjne	r0,#0x00,00115$
      000341 09               [12] 1871 	inc	r1
      000342 B9 00 05         [24] 1872 	cjne	r1,#0x00,00115$
      000345 0A               [12] 1873 	inc	r2
      000346 BA 00 E9         [24] 1874 	cjne	r2,#0x00,00103$
      000349 0B               [12] 1875 	inc	r3
      00034A                       1876 00115$:
      00034A 80 E6            [24] 1877 	sjmp	00103$
      00034C                       1878 00105$:
                           00034C  1879 	C$i2c.h$196$1$94 ==.
                           00034C  1880 	XG$delay_time$0$0 ==.
      00034C 22               [24] 1881 	ret
                                   1882 ;------------------------------------------------------------
                                   1883 ;Allocation info for local variables in function 'i2c_start'
                                   1884 ;------------------------------------------------------------
                           00034D  1885 	G$i2c_start$0$0 ==.
                           00034D  1886 	C$i2c.h$199$1$94 ==.
                                   1887 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:199: void i2c_start(void)
                                   1888 ;	-----------------------------------------
                                   1889 ;	 function i2c_start
                                   1890 ;	-----------------------------------------
      00034D                       1891 _i2c_start:
                           00034D  1892 	C$i2c.h$201$1$96 ==.
                                   1893 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:201: while(BUSY);              //Wait until SMBus0 is free
      00034D                       1894 00101$:
      00034D 20 C7 FD         [24] 1895 	jb	_BUSY,00101$
                           000350  1896 	C$i2c.h$202$1$96 ==.
                                   1897 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: STA = 1;                  //Set Start Bit
      000350 D2 C5            [12] 1898 	setb	_STA
                           000352  1899 	C$i2c.h$203$1$96 ==.
                                   1900 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: while(!SI);               //Wait until start sent
      000352                       1901 00104$:
      000352 30 C3 FD         [24] 1902 	jnb	_SI,00104$
                           000355  1903 	C$i2c.h$204$1$96 ==.
                                   1904 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: STA = 0;                  //Clear start bit
      000355 C2 C5            [12] 1905 	clr	_STA
                           000357  1906 	C$i2c.h$205$1$96 ==.
                                   1907 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: SI = 0;                   //Clear SI
      000357 C2 C3            [12] 1908 	clr	_SI
                           000359  1909 	C$i2c.h$206$1$96 ==.
                           000359  1910 	XG$i2c_start$0$0 ==.
      000359 22               [24] 1911 	ret
                                   1912 ;------------------------------------------------------------
                                   1913 ;Allocation info for local variables in function 'i2c_write'
                                   1914 ;------------------------------------------------------------
                                   1915 ;output_data               Allocated to registers 
                                   1916 ;------------------------------------------------------------
                           00035A  1917 	G$i2c_write$0$0 ==.
                           00035A  1918 	C$i2c.h$209$1$96 ==.
                                   1919 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:209: void i2c_write(unsigned char output_data)
                                   1920 ;	-----------------------------------------
                                   1921 ;	 function i2c_write
                                   1922 ;	-----------------------------------------
      00035A                       1923 _i2c_write:
      00035A 85 82 C2         [24] 1924 	mov	_SMB0DAT,dpl
                           00035D  1925 	C$i2c.h$212$1$98 ==.
                                   1926 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:212: while(!SI);               //Wait until send is complete
      00035D                       1927 00101$:
                           00035D  1928 	C$i2c.h$213$1$98 ==.
                                   1929 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: SI = 0;                   //Clear SI
      00035D 10 C3 02         [24] 1930 	jbc	_SI,00112$
      000360 80 FB            [24] 1931 	sjmp	00101$
      000362                       1932 00112$:
                           000362  1933 	C$i2c.h$214$1$98 ==.
                           000362  1934 	XG$i2c_write$0$0 ==.
      000362 22               [24] 1935 	ret
                                   1936 ;------------------------------------------------------------
                                   1937 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1938 ;------------------------------------------------------------
                                   1939 ;output_data               Allocated to registers 
                                   1940 ;------------------------------------------------------------
                           000363  1941 	G$i2c_write_and_stop$0$0 ==.
                           000363  1942 	C$i2c.h$217$1$98 ==.
                                   1943 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:217: void i2c_write_and_stop(unsigned char output_data)
                                   1944 ;	-----------------------------------------
                                   1945 ;	 function i2c_write_and_stop
                                   1946 ;	-----------------------------------------
      000363                       1947 _i2c_write_and_stop:
      000363 85 82 C2         [24] 1948 	mov	_SMB0DAT,dpl
                           000366  1949 	C$i2c.h$220$1$100 ==.
                                   1950 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:220: STO = 1;                  //Set stop bit
      000366 D2 C4            [12] 1951 	setb	_STO
                           000368  1952 	C$i2c.h$221$1$100 ==.
                                   1953 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: while(!SI);               //Wait until send is complete
      000368                       1954 00101$:
                           000368  1955 	C$i2c.h$222$1$100 ==.
                                   1956 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: SI = 0;                   //clear SI
      000368 10 C3 02         [24] 1957 	jbc	_SI,00112$
      00036B 80 FB            [24] 1958 	sjmp	00101$
      00036D                       1959 00112$:
                           00036D  1960 	C$i2c.h$223$1$100 ==.
                           00036D  1961 	XG$i2c_write_and_stop$0$0 ==.
      00036D 22               [24] 1962 	ret
                                   1963 ;------------------------------------------------------------
                                   1964 ;Allocation info for local variables in function 'i2c_read'
                                   1965 ;------------------------------------------------------------
                                   1966 ;input_data                Allocated to registers 
                                   1967 ;------------------------------------------------------------
                           00036E  1968 	G$i2c_read$0$0 ==.
                           00036E  1969 	C$i2c.h$226$1$100 ==.
                                   1970 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:226: unsigned char i2c_read(void)
                                   1971 ;	-----------------------------------------
                                   1972 ;	 function i2c_read
                                   1973 ;	-----------------------------------------
      00036E                       1974 _i2c_read:
                           00036E  1975 	C$i2c.h$229$1$102 ==.
                                   1976 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:229: while(!SI);                //Wait until we have data to read
      00036E                       1977 00101$:
      00036E 30 C3 FD         [24] 1978 	jnb	_SI,00101$
                           000371  1979 	C$i2c.h$230$1$102 ==.
                                   1980 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:230: input_data = SMB0DAT;      //Read the data
      000371 85 C2 82         [24] 1981 	mov	dpl,_SMB0DAT
                           000374  1982 	C$i2c.h$231$1$102 ==.
                                   1983 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: SI = 0;                    //Clear SI
      000374 C2 C3            [12] 1984 	clr	_SI
                           000376  1985 	C$i2c.h$232$1$102 ==.
                                   1986 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: return input_data;         //Return the read data
                           000376  1987 	C$i2c.h$233$1$102 ==.
                           000376  1988 	XG$i2c_read$0$0 ==.
      000376 22               [24] 1989 	ret
                                   1990 ;------------------------------------------------------------
                                   1991 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   1992 ;------------------------------------------------------------
                                   1993 ;input_data                Allocated to registers r7 
                                   1994 ;------------------------------------------------------------
                           000377  1995 	G$i2c_read_and_stop$0$0 ==.
                           000377  1996 	C$i2c.h$236$1$102 ==.
                                   1997 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:236: unsigned char i2c_read_and_stop(void)
                                   1998 ;	-----------------------------------------
                                   1999 ;	 function i2c_read_and_stop
                                   2000 ;	-----------------------------------------
      000377                       2001 _i2c_read_and_stop:
                           000377  2002 	C$i2c.h$239$1$104 ==.
                                   2003 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:239: while(!SI);                //Wait until we have data to read
      000377                       2004 00101$:
      000377 30 C3 FD         [24] 2005 	jnb	_SI,00101$
                           00037A  2006 	C$i2c.h$240$1$104 ==.
                                   2007 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:240: input_data = SMB0DAT;      //Read the data
      00037A AF C2            [24] 2008 	mov	r7,_SMB0DAT
                           00037C  2009 	C$i2c.h$241$1$104 ==.
                                   2010 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;                    //Clear SI
      00037C C2 C3            [12] 2011 	clr	_SI
                           00037E  2012 	C$i2c.h$242$1$104 ==.
                                   2013 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: STO = 1;                   //Set stop bit
      00037E D2 C4            [12] 2014 	setb	_STO
                           000380  2015 	C$i2c.h$243$1$104 ==.
                                   2016 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: while(!SI);                //Wait for stop
      000380                       2017 00104$:
                           000380  2018 	C$i2c.h$244$1$104 ==.
                                   2019 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;
      000380 10 C3 02         [24] 2020 	jbc	_SI,00122$
      000383 80 FB            [24] 2021 	sjmp	00104$
      000385                       2022 00122$:
                           000385  2023 	C$i2c.h$245$1$104 ==.
                                   2024 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: return input_data;         //Return the read data
      000385 8F 82            [24] 2025 	mov	dpl,r7
                           000387  2026 	C$i2c.h$246$1$104 ==.
                           000387  2027 	XG$i2c_read_and_stop$0$0 ==.
      000387 22               [24] 2028 	ret
                                   2029 ;------------------------------------------------------------
                                   2030 ;Allocation info for local variables in function 'i2c_write_data'
                                   2031 ;------------------------------------------------------------
                                   2032 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2033 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2034 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2035 ;addr                      Allocated to registers r7 
                                   2036 ;i                         Allocated to registers 
                                   2037 ;------------------------------------------------------------
                           000388  2038 	G$i2c_write_data$0$0 ==.
                           000388  2039 	C$i2c.h$249$1$104 ==.
                                   2040 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:249: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2041 ;	-----------------------------------------
                                   2042 ;	 function i2c_write_data
                                   2043 ;	-----------------------------------------
      000388                       2044 _i2c_write_data:
      000388 AF 82            [24] 2045 	mov	r7,dpl
                           00038A  2046 	C$i2c.h$252$1$106 ==.
                                   2047 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: EA = 0;                    // Don't allow interrupts during I2C work
      00038A C2 AF            [12] 2048 	clr	_EA
                           00038C  2049 	C$i2c.h$253$1$106 ==.
                                   2050 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: i2c_start();               //initiate I2C transfer
      00038C C0 07            [24] 2051 	push	ar7
      00038E 12r03r4D         [24] 2052 	lcall	_i2c_start
      000391 D0 07            [24] 2053 	pop	ar7
                           000393  2054 	C$i2c.h$254$1$106 ==.
                                   2055 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(addr & ~0x01);   //write the desired address to the bus
      000393 74 FE            [12] 2056 	mov	a,#0xfe
      000395 5F               [12] 2057 	anl	a,r7
      000396 F5 82            [12] 2058 	mov	dpl,a
      000398 12r03r5A         [24] 2059 	lcall	_i2c_write
                           00039B  2060 	C$i2c.h$255$1$106 ==.
                                   2061 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write(start_reg);      //write the start register to the bus
      00039B 85*0A 82         [24] 2062 	mov	dpl,_i2c_write_data_PARM_2
      00039E 12r03r5A         [24] 2063 	lcall	_i2c_write
                           0003A1  2064 	C$i2c.h$256$1$106 ==.
                                   2065 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003A1 7F 00            [12] 2066 	mov	r7,#0x00
      0003A3                       2067 00103$:
      0003A3 AD*0E            [24] 2068 	mov	r5,_i2c_write_data_PARM_4
      0003A5 7E 00            [12] 2069 	mov	r6,#0x00
      0003A7 1D               [12] 2070 	dec	r5
      0003A8 BD FF 01         [24] 2071 	cjne	r5,#0xff,00114$
      0003AB 1E               [12] 2072 	dec	r6
      0003AC                       2073 00114$:
      0003AC 8F 03            [24] 2074 	mov	ar3,r7
      0003AE 7C 00            [12] 2075 	mov	r4,#0x00
      0003B0 C3               [12] 2076 	clr	c
      0003B1 EB               [12] 2077 	mov	a,r3
      0003B2 9D               [12] 2078 	subb	a,r5
      0003B3 EC               [12] 2079 	mov	a,r4
      0003B4 64 80            [12] 2080 	xrl	a,#0x80
      0003B6 8E F0            [24] 2081 	mov	b,r6
      0003B8 63 F0 80         [24] 2082 	xrl	b,#0x80
      0003BB 95 F0            [12] 2083 	subb	a,b
      0003BD 50 1F            [24] 2084 	jnc	00101$
                           0003BF  2085 	C$i2c.h$257$1$106 ==.
                                   2086 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_write(buffer[i]);
      0003BF EF               [12] 2087 	mov	a,r7
      0003C0 25*0B            [12] 2088 	add	a,_i2c_write_data_PARM_3
      0003C2 FC               [12] 2089 	mov	r4,a
      0003C3 E4               [12] 2090 	clr	a
      0003C4 35*0C            [12] 2091 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003C6 FD               [12] 2092 	mov	r5,a
      0003C7 AE*0D            [24] 2093 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003C9 8C 82            [24] 2094 	mov	dpl,r4
      0003CB 8D 83            [24] 2095 	mov	dph,r5
      0003CD 8E F0            [24] 2096 	mov	b,r6
      0003CF 12r00r00         [24] 2097 	lcall	__gptrget
      0003D2 F5 82            [12] 2098 	mov	dpl,a
      0003D4 C0 07            [24] 2099 	push	ar7
      0003D6 12r03r5A         [24] 2100 	lcall	_i2c_write
      0003D9 D0 07            [24] 2101 	pop	ar7
                           0003DB  2102 	C$i2c.h$256$1$106 ==.
                                   2103 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003DB 0F               [12] 2104 	inc	r7
      0003DC 80 C5            [24] 2105 	sjmp	00103$
      0003DE                       2106 00101$:
                           0003DE  2107 	C$i2c.h$258$1$106 ==.
                                   2108 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003DE AE*0E            [24] 2109 	mov	r6,_i2c_write_data_PARM_4
      0003E0 7F 00            [12] 2110 	mov	r7,#0x00
      0003E2 1E               [12] 2111 	dec	r6
      0003E3 BE FF 01         [24] 2112 	cjne	r6,#0xff,00116$
      0003E6 1F               [12] 2113 	dec	r7
      0003E7                       2114 00116$:
      0003E7 EE               [12] 2115 	mov	a,r6
      0003E8 25*0B            [12] 2116 	add	a,_i2c_write_data_PARM_3
      0003EA FE               [12] 2117 	mov	r6,a
      0003EB EF               [12] 2118 	mov	a,r7
      0003EC 35*0C            [12] 2119 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003EE FF               [12] 2120 	mov	r7,a
      0003EF AD*0D            [24] 2121 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F1 8E 82            [24] 2122 	mov	dpl,r6
      0003F3 8F 83            [24] 2123 	mov	dph,r7
      0003F5 8D F0            [24] 2124 	mov	b,r5
      0003F7 12r00r00         [24] 2125 	lcall	__gptrget
      0003FA F5 82            [12] 2126 	mov	dpl,a
      0003FC 12r03r63         [24] 2127 	lcall	_i2c_write_and_stop
                           0003FF  2128 	C$i2c.h$259$1$106 ==.
                                   2129 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: EA = 1;                    // Re-Enable interrupts
      0003FF D2 AF            [12] 2130 	setb	_EA
                           000401  2131 	C$i2c.h$260$1$106 ==.
                           000401  2132 	XG$i2c_write_data$0$0 ==.
      000401 22               [24] 2133 	ret
                                   2134 ;------------------------------------------------------------
                                   2135 ;Allocation info for local variables in function 'i2c_read_data'
                                   2136 ;------------------------------------------------------------
                                   2137 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2138 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2139 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2140 ;addr                      Allocated to registers r7 
                                   2141 ;j                         Allocated to registers 
                                   2142 ;------------------------------------------------------------
                           000402  2143 	G$i2c_read_data$0$0 ==.
                           000402  2144 	C$i2c.h$263$1$106 ==.
                                   2145 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2146 ;	-----------------------------------------
                                   2147 ;	 function i2c_read_data
                                   2148 ;	-----------------------------------------
      000402                       2149 _i2c_read_data:
      000402 AF 82            [24] 2150 	mov	r7,dpl
                           000404  2151 	C$i2c.h$266$1$108 ==.
                                   2152 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:266: EA = 0;                    // Don't allow interrupts during I2C work
      000404 C2 AF            [12] 2153 	clr	_EA
                           000406  2154 	C$i2c.h$267$1$108 ==.
                                   2155 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: i2c_start();               //Start I2C transfer
      000406 C0 07            [24] 2156 	push	ar7
      000408 12r03r4D         [24] 2157 	lcall	_i2c_start
      00040B D0 07            [24] 2158 	pop	ar7
                           00040D  2159 	C$i2c.h$268$1$108 ==.
                                   2160 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:268: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      00040D 74 FE            [12] 2161 	mov	a,#0xfe
      00040F 5F               [12] 2162 	anl	a,r7
      000410 F5 82            [12] 2163 	mov	dpl,a
      000412 C0 07            [24] 2164 	push	ar7
      000414 12r03r5A         [24] 2165 	lcall	_i2c_write
                           000417  2166 	C$i2c.h$269$1$108 ==.
                                   2167 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:269: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      000417 85*0F 82         [24] 2168 	mov	dpl,_i2c_read_data_PARM_2
      00041A 12r03r63         [24] 2169 	lcall	_i2c_write_and_stop
                           00041D  2170 	C$i2c.h$270$1$108 ==.
                                   2171 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:270: i2c_start();               //Start I2C transfer
      00041D 12r03r4D         [24] 2172 	lcall	_i2c_start
      000420 D0 07            [24] 2173 	pop	ar7
                           000422  2174 	C$i2c.h$271$1$108 ==.
                                   2175 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000422 74 01            [12] 2176 	mov	a,#0x01
      000424 4F               [12] 2177 	orl	a,r7
      000425 F5 82            [12] 2178 	mov	dpl,a
      000427 12r03r5A         [24] 2179 	lcall	_i2c_write
                           00042A  2180 	C$i2c.h$272$1$108 ==.
                                   2181 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: for(j = 0; j < num_bytes - 1; j++)
      00042A 7F 00            [12] 2182 	mov	r7,#0x00
      00042C                       2183 00103$:
      00042C AD*13            [24] 2184 	mov	r5,_i2c_read_data_PARM_4
      00042E 7E 00            [12] 2185 	mov	r6,#0x00
      000430 1D               [12] 2186 	dec	r5
      000431 BD FF 01         [24] 2187 	cjne	r5,#0xff,00114$
      000434 1E               [12] 2188 	dec	r6
      000435                       2189 00114$:
      000435 8F 03            [24] 2190 	mov	ar3,r7
      000437 7C 00            [12] 2191 	mov	r4,#0x00
      000439 C3               [12] 2192 	clr	c
      00043A EB               [12] 2193 	mov	a,r3
      00043B 9D               [12] 2194 	subb	a,r5
      00043C EC               [12] 2195 	mov	a,r4
      00043D 64 80            [12] 2196 	xrl	a,#0x80
      00043F 8E F0            [24] 2197 	mov	b,r6
      000441 63 F0 80         [24] 2198 	xrl	b,#0x80
      000444 95 F0            [12] 2199 	subb	a,b
      000446 50 2E            [24] 2200 	jnc	00101$
                           000448  2201 	C$i2c.h$274$2$109 ==.
                                   2202 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: AA = 1;                //Set acknowledge bit
      000448 D2 C2            [12] 2203 	setb	_AA
                           00044A  2204 	C$i2c.h$275$2$109 ==.
                                   2205 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: buffer[j] = i2c_read();//Read data, save it in buffer
      00044A EF               [12] 2206 	mov	a,r7
      00044B 25*10            [12] 2207 	add	a,_i2c_read_data_PARM_3
      00044D FC               [12] 2208 	mov	r4,a
      00044E E4               [12] 2209 	clr	a
      00044F 35*11            [12] 2210 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000451 FD               [12] 2211 	mov	r5,a
      000452 AE*12            [24] 2212 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000454 C0 07            [24] 2213 	push	ar7
      000456 C0 06            [24] 2214 	push	ar6
      000458 C0 05            [24] 2215 	push	ar5
      00045A C0 04            [24] 2216 	push	ar4
      00045C 12r03r6E         [24] 2217 	lcall	_i2c_read
      00045F AB 82            [24] 2218 	mov	r3,dpl
      000461 D0 04            [24] 2219 	pop	ar4
      000463 D0 05            [24] 2220 	pop	ar5
      000465 D0 06            [24] 2221 	pop	ar6
      000467 D0 07            [24] 2222 	pop	ar7
      000469 8C 82            [24] 2223 	mov	dpl,r4
      00046B 8D 83            [24] 2224 	mov	dph,r5
      00046D 8E F0            [24] 2225 	mov	b,r6
      00046F EB               [12] 2226 	mov	a,r3
      000470 12r00r00         [24] 2227 	lcall	__gptrput
                           000473  2228 	C$i2c.h$272$1$108 ==.
                                   2229 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: for(j = 0; j < num_bytes - 1; j++)
      000473 0F               [12] 2230 	inc	r7
      000474 80 B6            [24] 2231 	sjmp	00103$
      000476                       2232 00101$:
                           000476  2233 	C$i2c.h$277$1$108 ==.
                                   2234 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: AA = 0;
      000476 C2 C2            [12] 2235 	clr	_AA
                           000478  2236 	C$i2c.h$278$1$108 ==.
                                   2237 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:278: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      000478 AE*13            [24] 2238 	mov	r6,_i2c_read_data_PARM_4
      00047A 7F 00            [12] 2239 	mov	r7,#0x00
      00047C 1E               [12] 2240 	dec	r6
      00047D BE FF 01         [24] 2241 	cjne	r6,#0xff,00116$
      000480 1F               [12] 2242 	dec	r7
      000481                       2243 00116$:
      000481 EE               [12] 2244 	mov	a,r6
      000482 25*10            [12] 2245 	add	a,_i2c_read_data_PARM_3
      000484 FE               [12] 2246 	mov	r6,a
      000485 EF               [12] 2247 	mov	a,r7
      000486 35*11            [12] 2248 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000488 FF               [12] 2249 	mov	r7,a
      000489 AD*12            [24] 2250 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048B C0 07            [24] 2251 	push	ar7
      00048D C0 06            [24] 2252 	push	ar6
      00048F C0 05            [24] 2253 	push	ar5
      000491 12r03r77         [24] 2254 	lcall	_i2c_read_and_stop
      000494 AC 82            [24] 2255 	mov	r4,dpl
      000496 D0 05            [24] 2256 	pop	ar5
      000498 D0 06            [24] 2257 	pop	ar6
      00049A D0 07            [24] 2258 	pop	ar7
      00049C 8E 82            [24] 2259 	mov	dpl,r6
      00049E 8F 83            [24] 2260 	mov	dph,r7
      0004A0 8D F0            [24] 2261 	mov	b,r5
      0004A2 EC               [12] 2262 	mov	a,r4
      0004A3 12r00r00         [24] 2263 	lcall	__gptrput
                           0004A6  2264 	C$i2c.h$279$1$108 ==.
                                   2265 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: EA = 1;                    // Re-Enable interrupts
      0004A6 D2 AF            [12] 2266 	setb	_EA
                           0004A8  2267 	C$i2c.h$280$1$108 ==.
                           0004A8  2268 	XG$i2c_read_data$0$0 ==.
      0004A8 22               [24] 2269 	ret
                                   2270 ;------------------------------------------------------------
                                   2271 ;Allocation info for local variables in function 'Accel_Init'
                                   2272 ;------------------------------------------------------------
                           0004A9  2273 	G$Accel_Init$0$0 ==.
                           0004A9  2274 	C$i2c.h$289$1$108 ==.
                                   2275 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:289: void Accel_Init(void)
                                   2276 ;	-----------------------------------------
                                   2277 ;	 function Accel_Init
                                   2278 ;	-----------------------------------------
      0004A9                       2279 _Accel_Init:
                           0004A9  2280 	C$i2c.h$293$1$111 ==.
                                   2281 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      0004A9 75*00 23         [24] 2282 	mov	_Data2,#0x23
                           0004AC  2283 	C$i2c.h$295$1$111 ==.
                                   2284 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:295: Data2[1]=0x00;	//Default - no filtering
      0004AC 75*01 00         [24] 2285 	mov	(_Data2 + 0x0001),#0x00
                           0004AF  2286 	C$i2c.h$296$1$111 ==.
                                   2287 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:296: Data2[1]=0x10;	//filtered data selected, HPF = 1.0->0.125Hz
      0004AF 75*01 10         [24] 2288 	mov	(_Data2 + 0x0001),#0x10
                           0004B2  2289 	C$i2c.h$297$1$111 ==.
                                   2290 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:297: Data2[2]=0x00;	//default - no interrupts enabled
      0004B2 75*02 00         [24] 2291 	mov	(_Data2 + 0x0002),#0x00
                           0004B5  2292 	C$i2c.h$299$1$111 ==.
                                   2293 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:299: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B5 75*0Br00         [24] 2294 	mov	_i2c_write_data_PARM_3,#_Data2
      0004B8 75*0C 00         [24] 2295 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BB 75*0D 40         [24] 2296 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004BE 75*0A 20         [24] 2297 	mov	_i2c_write_data_PARM_2,#0x20
      0004C1 75*0E 01         [24] 2298 	mov	_i2c_write_data_PARM_4,#0x01
      0004C4 75 82 30         [24] 2299 	mov	dpl,#0x30
      0004C7 12r03r88         [24] 2300 	lcall	_i2c_write_data
                           0004CA  2301 	C$i2c.h$305$1$111 ==.
                           0004CA  2302 	XG$Accel_Init$0$0 ==.
      0004CA 22               [24] 2303 	ret
                                   2304 ;------------------------------------------------------------
                                   2305 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2306 ;------------------------------------------------------------
                           0004CB  2307 	G$Accel_Init_C$0$0 ==.
                           0004CB  2308 	C$i2c.h$308$1$111 ==.
                                   2309 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:308: void Accel_Init_C(void)
                                   2310 ;	-----------------------------------------
                                   2311 ;	 function Accel_Init_C
                                   2312 ;	-----------------------------------------
      0004CB                       2313 _Accel_Init_C:
                           0004CB  2314 	C$i2c.h$313$1$113 ==.
                                   2315 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: Data2[0]=0x04;	//set register address auto increment bit 
      0004CB 75*00 04         [24] 2316 	mov	_Data2,#0x04
                           0004CE  2317 	C$i2c.h$314$1$113 ==.
                                   2318 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:314: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004CE 75*0Br00         [24] 2319 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D1 75*0C 00         [24] 2320 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D4 75*0D 40         [24] 2321 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004D7 75*0A 23         [24] 2322 	mov	_i2c_write_data_PARM_2,#0x23
      0004DA 75*0E 01         [24] 2323 	mov	_i2c_write_data_PARM_4,#0x01
      0004DD 75 82 3A         [24] 2324 	mov	dpl,#0x3a
      0004E0 12r03r88         [24] 2325 	lcall	_i2c_write_data
                           0004E3  2326 	C$i2c.h$316$1$113 ==.
                                   2327 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:316: Data2[0]=0x6B;	//R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E3 75*00 6B         [24] 2328 	mov	_Data2,#0x6b
                           0004E6  2329 	C$i2c.h$318$1$113 ==.
                                   2330 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[1]=0x00;	//R21 Default - no HP filtering
      0004E6 75*01 00         [24] 2331 	mov	(_Data2 + 0x0001),#0x00
                           0004E9  2332 	C$i2c.h$320$1$113 ==.
                                   2333 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:320: Data2[2]=0x00;	//R22 Default - no interrupts enabled
      0004E9 75*02 00         [24] 2334 	mov	(_Data2 + 0x0002),#0x00
                           0004EC  2335 	C$i2c.h$321$1$113 ==.
                                   2336 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004EC 75*0Br00         [24] 2337 	mov	_i2c_write_data_PARM_3,#_Data2
      0004EF 75*0C 00         [24] 2338 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F2 75*0D 40         [24] 2339 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F5 75*0A 20         [24] 2340 	mov	_i2c_write_data_PARM_2,#0x20
      0004F8 75*0E 01         [24] 2341 	mov	_i2c_write_data_PARM_4,#0x01
      0004FB 75 82 3A         [24] 2342 	mov	dpl,#0x3a
      0004FE 12r03r88         [24] 2343 	lcall	_i2c_write_data
                           000501  2344 	C$i2c.h$323$1$113 ==.
                           000501  2345 	XG$Accel_Init_C$0$0 ==.
      000501 22               [24] 2346 	ret
                                   2347 ;------------------------------------------------------------
                                   2348 ;Allocation info for local variables in function 'main'
                                   2349 ;------------------------------------------------------------
                           000502  2350 	G$main$0$0 ==.
                           000502  2351 	C$HW10.c$24$1$113 ==.
                                   2352 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:24: void main(void) {
                                   2353 ;	-----------------------------------------
                                   2354 ;	 function main
                                   2355 ;	-----------------------------------------
      000502                       2356 _main:
                           000502  2357 	C$HW10.c$25$1$121 ==.
                                   2358 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:25: Sys_Init();
      000502 12r00r37         [24] 2359 	lcall	_Sys_Init
                           000505  2360 	C$HW10.c$26$1$121 ==.
                                   2361 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:26: putchar(' ');
      000505 75 82 20         [24] 2362 	mov	dpl,#0x20
      000508 12r00r4A         [24] 2363 	lcall	_putchar
                           00050B  2364 	C$HW10.c$27$1$121 ==.
                                   2365 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:27: XBR0_Init();
      00050B 12r05r92         [24] 2366 	lcall	_XBR0_Init
                           00050E  2367 	C$HW10.c$28$1$121 ==.
                                   2368 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:28: PCA_Init();
      00050E 12r05r96         [24] 2369 	lcall	_PCA_Init
                           000511  2370 	C$HW10.c$29$1$121 ==.
                                   2371 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:29: SMB_Init();
      000511 12r05rA4         [24] 2372 	lcall	_SMB_Init
                           000514  2373 	C$HW10.c$31$1$121 ==.
                                   2374 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:31: while(1) {
      000514                       2375 00106$:
                           000514  2376 	C$HW10.c$32$2$122 ==.
                                   2377 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:32: if (new_range) {
      000514 E5*1B            [12] 2378 	mov	a,_new_range
      000516 60 4D            [24] 2379 	jz	00102$
                           000518  2380 	C$HW10.c$33$3$123 ==.
                                   2381 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:33: range = ReadRanger();
      000518 12r05rDE         [24] 2382 	lcall	_ReadRanger
      00051B AE 82            [24] 2383 	mov	r6,dpl
      00051D 8E*1C            [24] 2384 	mov	_range,r6
                           00051F  2385 	C$HW10.c$34$3$123 ==.
                                   2386 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:34: Data[0] = 0x51; // write 0x51 to reg 0 of the ranger:
      00051F AD*1F            [24] 2387 	mov	r5,_Data
      000521 AE*20            [24] 2388 	mov	r6,(_Data + 1)
      000523 AF*21            [24] 2389 	mov	r7,(_Data + 2)
      000525 8D 82            [24] 2390 	mov	dpl,r5
      000527 8E 83            [24] 2391 	mov	dph,r6
      000529 8F F0            [24] 2392 	mov	b,r7
      00052B 74 51            [12] 2393 	mov	a,#0x51
      00052D 12r00r00         [24] 2394 	lcall	__gptrput
                           000530  2395 	C$HW10.c$35$3$123 ==.
                                   2396 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:35: i2c_write_data(0xE0, 0, Data, 1); // write one byte of data to reg 0 at addr
      000530 75*0A 00         [24] 2397 	mov	_i2c_write_data_PARM_2,#0x00
      000533 85*1F*0B         [24] 2398 	mov	_i2c_write_data_PARM_3,_Data
      000536 85*20*0C         [24] 2399 	mov	(_i2c_write_data_PARM_3 + 1),(_Data + 1)
      000539 85*21*0D         [24] 2400 	mov	(_i2c_write_data_PARM_3 + 2),(_Data + 2)
      00053C 75*0E 01         [24] 2401 	mov	_i2c_write_data_PARM_4,#0x01
      00053F 75 82 E0         [24] 2402 	mov	dpl,#0xe0
      000542 12r03r88         [24] 2403 	lcall	_i2c_write_data
                           000545  2404 	C$HW10.c$36$3$123 ==.
                                   2405 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:36: new_range = 0;
      000545 75*1B 00         [24] 2406 	mov	_new_range,#0x00
                           000548  2407 	C$HW10.c$37$3$123 ==.
                                   2408 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:37: printf("%d\n\r",range);
      000548 AE*1C            [24] 2409 	mov	r6,_range
      00054A 7F 00            [12] 2410 	mov	r7,#0x00
      00054C C0 06            [24] 2411 	push	ar6
      00054E C0 07            [24] 2412 	push	ar7
      000550 74r29            [12] 2413 	mov	a,#___str_3
      000552 C0 E0            [24] 2414 	push	acc
      000554 74s00            [12] 2415 	mov	a,#(___str_3 >> 8)
      000556 C0 E0            [24] 2416 	push	acc
      000558 74 80            [12] 2417 	mov	a,#0x80
      00055A C0 E0            [24] 2418 	push	acc
      00055C 12r00r00         [24] 2419 	lcall	_printf
      00055F E5 81            [12] 2420 	mov	a,sp
      000561 24 FB            [12] 2421 	add	a,#0xfb
      000563 F5 81            [12] 2422 	mov	sp,a
      000565                       2423 00102$:
                           000565  2424 	C$HW10.c$39$2$122 ==.
                                   2425 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:39: if (new_heading) {
      000565 E5*1D            [12] 2426 	mov	a,_new_heading
      000567 60 AB            [24] 2427 	jz	00106$
                           000569  2428 	C$HW10.c$40$3$124 ==.
                                   2429 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:40: heading = ReadCompass();
      000569 12r06r19         [24] 2430 	lcall	_ReadCompass
      00056C AE 82            [24] 2431 	mov	r6,dpl
                           00056E  2432 	C$HW10.c$41$3$124 ==.
                                   2433 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:41: printf("%d\n\r", heading);
      00056E 8E*1E            [24] 2434 	mov  _heading,r6
      000570 7F 00            [12] 2435 	mov	r7,#0x00
      000572 C0 06            [24] 2436 	push	ar6
      000574 C0 07            [24] 2437 	push	ar7
      000576 74r29            [12] 2438 	mov	a,#___str_3
      000578 C0 E0            [24] 2439 	push	acc
      00057A 74s00            [12] 2440 	mov	a,#(___str_3 >> 8)
      00057C C0 E0            [24] 2441 	push	acc
      00057E 74 80            [12] 2442 	mov	a,#0x80
      000580 C0 E0            [24] 2443 	push	acc
      000582 12r00r00         [24] 2444 	lcall	_printf
      000585 E5 81            [12] 2445 	mov	a,sp
      000587 24 FB            [12] 2446 	add	a,#0xfb
      000589 F5 81            [12] 2447 	mov	sp,a
                           00058B  2448 	C$HW10.c$42$3$124 ==.
                                   2449 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:42: new_heading = 0;
      00058B 75*1D 00         [24] 2450 	mov	_new_heading,#0x00
      00058E 02r05r14         [24] 2451 	ljmp	00106$
                           000591  2452 	C$HW10.c$45$1$121 ==.
                           000591  2453 	XG$main$0$0 ==.
      000591 22               [24] 2454 	ret
                                   2455 ;------------------------------------------------------------
                                   2456 ;Allocation info for local variables in function 'XBR0_Init'
                                   2457 ;------------------------------------------------------------
                           000592  2458 	G$XBR0_Init$0$0 ==.
                           000592  2459 	C$HW10.c$48$1$121 ==.
                                   2460 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:48: void XBR0_Init(void) {
                                   2461 ;	-----------------------------------------
                                   2462 ;	 function XBR0_Init
                                   2463 ;	-----------------------------------------
      000592                       2464 _XBR0_Init:
                           000592  2465 	C$HW10.c$49$1$126 ==.
                                   2466 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:49: XBR0 = 0x19;
      000592 75 E1 19         [24] 2467 	mov	_XBR0,#0x19
                           000595  2468 	C$HW10.c$50$1$126 ==.
                           000595  2469 	XG$XBR0_Init$0$0 ==.
      000595 22               [24] 2470 	ret
                                   2471 ;------------------------------------------------------------
                                   2472 ;Allocation info for local variables in function 'PCA_Init'
                                   2473 ;------------------------------------------------------------
                           000596  2474 	G$PCA_Init$0$0 ==.
                           000596  2475 	C$HW10.c$52$1$126 ==.
                                   2476 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:52: void PCA_Init(void) {
                                   2477 ;	-----------------------------------------
                                   2478 ;	 function PCA_Init
                                   2479 ;	-----------------------------------------
      000596                       2480 _PCA_Init:
                           000596  2481 	C$HW10.c$53$1$128 ==.
                                   2482 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:53: PCA0MD = 0x81;
      000596 75 D9 81         [24] 2483 	mov	_PCA0MD,#0x81
                           000599  2484 	C$HW10.c$54$1$128 ==.
                                   2485 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:54: PCA0CPM2 = 0xC2;
      000599 75 DC C2         [24] 2486 	mov	_PCA0CPM2,#0xc2
                           00059C  2487 	C$HW10.c$55$1$128 ==.
                                   2488 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:55: PCA0CN != 0x40;
      00059C E5 D8            [12] 2489 	mov	a,_PCA0CN
                           00059E  2490 	C$HW10.c$56$1$128 ==.
                                   2491 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:56: EIE1 |= 0x08;
      00059E 43 E6 08         [24] 2492 	orl	_EIE1,#0x08
                           0005A1  2493 	C$HW10.c$57$1$128 ==.
                                   2494 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:57: EA = 1;
      0005A1 D2 AF            [12] 2495 	setb	_EA
                           0005A3  2496 	C$HW10.c$58$1$128 ==.
                           0005A3  2497 	XG$PCA_Init$0$0 ==.
      0005A3 22               [24] 2498 	ret
                                   2499 ;------------------------------------------------------------
                                   2500 ;Allocation info for local variables in function 'SMB_Init'
                                   2501 ;------------------------------------------------------------
                           0005A4  2502 	G$SMB_Init$0$0 ==.
                           0005A4  2503 	C$HW10.c$60$1$128 ==.
                                   2504 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:60: void SMB_Init(void) {
                                   2505 ;	-----------------------------------------
                                   2506 ;	 function SMB_Init
                                   2507 ;	-----------------------------------------
      0005A4                       2508 _SMB_Init:
                           0005A4  2509 	C$HW10.c$61$1$130 ==.
                                   2510 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:61: SMB0CR = 0x93;
      0005A4 75 CF 93         [24] 2511 	mov	_SMB0CR,#0x93
                           0005A7  2512 	C$HW10.c$62$1$130 ==.
                                   2513 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:62: ENSMB = 1;
      0005A7 D2 C6            [12] 2514 	setb	_ENSMB
                           0005A9  2515 	C$HW10.c$63$1$130 ==.
                           0005A9  2516 	XG$SMB_Init$0$0 ==.
      0005A9 22               [24] 2517 	ret
                                   2518 ;------------------------------------------------------------
                                   2519 ;Allocation info for local variables in function 'PCA_ISR'
                                   2520 ;------------------------------------------------------------
                           0005AA  2521 	G$PCA_ISR$0$0 ==.
                           0005AA  2522 	C$HW10.c$65$1$130 ==.
                                   2523 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:65: void PCA_ISR (void) __interrupt 9 {
                                   2524 ;	-----------------------------------------
                                   2525 ;	 function PCA_ISR
                                   2526 ;	-----------------------------------------
      0005AA                       2527 _PCA_ISR:
      0005AA C0 E0            [24] 2528 	push	acc
      0005AC C0 D0            [24] 2529 	push	psw
                           0005AE  2530 	C$HW10.c$66$1$132 ==.
                                   2531 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:66: if (CF) {
      0005AE 30 DF 25         [24] 2532 	jnb	_CF,00104$
                           0005B1  2533 	C$HW10.c$67$2$133 ==.
                                   2534 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:67: PCA0 = 0x7000;
      0005B1 75 E9 00         [24] 2535 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0005B4 75 F9 70         [24] 2536 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0005B7  2537 	C$HW10.c$68$2$133 ==.
                                   2538 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:68: PCA_count++;                  // Start count
      0005B7 05*14            [12] 2539 	inc	_PCA_count
      0005B9 E4               [12] 2540 	clr	a
      0005BA B5*14 02         [24] 2541 	cjne	a,_PCA_count,00115$
      0005BD 05*15            [12] 2542 	inc	(_PCA_count + 1)
      0005BF                       2543 00115$:
                           0005BF  2544 	C$HW10.c$69$2$133 ==.
                                   2545 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:69: if (PCA_count >= 4) {
      0005BF C3               [12] 2546 	clr	c
      0005C0 E5*14            [12] 2547 	mov	a,_PCA_count
      0005C2 94 04            [12] 2548 	subb	a,#0x04
      0005C4 E5*15            [12] 2549 	mov	a,(_PCA_count + 1)
      0005C6 94 00            [12] 2550 	subb	a,#0x00
      0005C8 40 08            [24] 2551 	jc	00102$
                           0005CA  2552 	C$HW10.c$70$3$134 ==.
                                   2553 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:70: new_range = 1;
      0005CA 75*1B 01         [24] 2554 	mov	_new_range,#0x01
                           0005CD  2555 	C$HW10.c$71$3$134 ==.
                                   2556 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:71: PCA_count = 0;
      0005CD E4               [12] 2557 	clr	a
      0005CE F5*14            [12] 2558 	mov	_PCA_count,a
      0005D0 F5*15            [12] 2559 	mov	(_PCA_count + 1),a
      0005D2                       2560 00102$:
                           0005D2  2561 	C$HW10.c$73$2$133 ==.
                                   2562 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:73: CF = 0;
      0005D2 C2 DF            [12] 2563 	clr	_CF
      0005D4 80 03            [24] 2564 	sjmp	00106$
      0005D6                       2565 00104$:
                           0005D6  2566 	C$HW10.c$75$2$135 ==.
                                   2567 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:75: PCA0CN &= 0xC0;               // All other interrupt types
      0005D6 53 D8 C0         [24] 2568 	anl	_PCA0CN,#0xc0
      0005D9                       2569 00106$:
      0005D9 D0 D0            [24] 2570 	pop	psw
      0005DB D0 E0            [24] 2571 	pop	acc
                           0005DD  2572 	C$HW10.c$77$1$132 ==.
                           0005DD  2573 	XG$PCA_ISR$0$0 ==.
      0005DD 32               [24] 2574 	reti
                                   2575 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2576 ;	eliminated unneeded push/pop dpl
                                   2577 ;	eliminated unneeded push/pop dph
                                   2578 ;	eliminated unneeded push/pop b
                                   2579 ;------------------------------------------------------------
                                   2580 ;Allocation info for local variables in function 'ReadRanger'
                                   2581 ;------------------------------------------------------------
                                   2582 ;Data                      Allocated with name '_ReadRanger_Data_1_137'
                                   2583 ;range                     Allocated to registers 
                                   2584 ;addr                      Allocated to registers 
                                   2585 ;------------------------------------------------------------
                           0005DE  2586 	G$ReadRanger$0$0 ==.
                           0005DE  2587 	C$HW10.c$79$1$132 ==.
                                   2588 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:79: unsigned int ReadRanger(void) {
                                   2589 ;	-----------------------------------------
                                   2590 ;	 function ReadRanger
                                   2591 ;	-----------------------------------------
      0005DE                       2592 _ReadRanger:
                           0005DE  2593 	C$HW10.c$83$1$137 ==.
                                   2594 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:83: i2c_read_data(addr, 0, Data, 1);
      0005DE 75*10r22         [24] 2595 	mov	_i2c_read_data_PARM_3,#_ReadRanger_Data_1_137
      0005E1 75*11 00         [24] 2596 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005E4 75*12 40         [24] 2597 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005E7 75*0F 00         [24] 2598 	mov	_i2c_read_data_PARM_2,#0x00
      0005EA 75*13 01         [24] 2599 	mov	_i2c_read_data_PARM_4,#0x01
      0005ED 75 82 E0         [24] 2600 	mov	dpl,#0xe0
      0005F0 12r04r02         [24] 2601 	lcall	_i2c_read_data
                           0005F3  2602 	C$HW10.c$84$1$137 ==.
                                   2603 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:84: i2c_read_data(addr, 1, Data, 1);
      0005F3 75*10r22         [24] 2604 	mov	_i2c_read_data_PARM_3,#_ReadRanger_Data_1_137
      0005F6 75*11 00         [24] 2605 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005F9 75*12 40         [24] 2606 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005FC 75*0F 01         [24] 2607 	mov	_i2c_read_data_PARM_2,#0x01
      0005FF 75*13 01         [24] 2608 	mov	_i2c_read_data_PARM_4,#0x01
      000602 75 82 E0         [24] 2609 	mov	dpl,#0xe0
      000605 12r04r02         [24] 2610 	lcall	_i2c_read_data
                           000608  2611 	C$HW10.c$85$1$137 ==.
                                   2612 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:85: range = (((unsigned int)Data[0] << 8) | Data[1]);
      000608 AF*22            [24] 2613 	mov	r7,_ReadRanger_Data_1_137
      00060A 7E 00            [12] 2614 	mov	r6,#0x00
      00060C AC*23            [24] 2615 	mov	r4,(_ReadRanger_Data_1_137 + 0x0001)
      00060E 7D 00            [12] 2616 	mov	r5,#0x00
      000610 EC               [12] 2617 	mov	a,r4
      000611 4E               [12] 2618 	orl	a,r6
      000612 F5 82            [12] 2619 	mov	dpl,a
      000614 ED               [12] 2620 	mov	a,r5
      000615 4F               [12] 2621 	orl	a,r7
      000616 F5 83            [12] 2622 	mov	dph,a
                           000618  2623 	C$HW10.c$86$1$137 ==.
                                   2624 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:86: return range;
                           000618  2625 	C$HW10.c$87$1$137 ==.
                           000618  2626 	XG$ReadRanger$0$0 ==.
      000618 22               [24] 2627 	ret
                                   2628 ;------------------------------------------------------------
                                   2629 ;Allocation info for local variables in function 'ReadCompass'
                                   2630 ;------------------------------------------------------------
                                   2631 ;Data                      Allocated with name '_ReadCompass_Data_1_139'
                                   2632 ;addr                      Allocated to registers 
                                   2633 ;rev_num                   Allocated to registers 
                                   2634 ;heading                   Allocated to registers 
                                   2635 ;------------------------------------------------------------
                           000619  2636 	G$ReadCompass$0$0 ==.
                           000619  2637 	C$HW10.c$89$1$137 ==.
                                   2638 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:89: unsigned int ReadCompass(void) {
                                   2639 ;	-----------------------------------------
                                   2640 ;	 function ReadCompass
                                   2641 ;	-----------------------------------------
      000619                       2642 _ReadCompass:
                           000619  2643 	C$HW10.c$94$1$139 ==.
                                   2644 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:94: i2c_read_data(addr, 0, Data, 1);
      000619 75*10r24         [24] 2645 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_139
      00061C 75*11 00         [24] 2646 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00061F 75*12 40         [24] 2647 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000622 75*0F 00         [24] 2648 	mov	_i2c_read_data_PARM_2,#0x00
      000625 75*13 01         [24] 2649 	mov	_i2c_read_data_PARM_4,#0x01
      000628 75 82 C0         [24] 2650 	mov	dpl,#0xc0
      00062B 12r04r02         [24] 2651 	lcall	_i2c_read_data
                           00062E  2652 	C$HW10.c$96$1$139 ==.
                                   2653 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:96: i2c_read_data(addr, 12, Data, 2);
      00062E 75*10r24         [24] 2654 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_139
      000631 75*11 00         [24] 2655 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000634 75*12 40         [24] 2656 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000637 75*0F 0C         [24] 2657 	mov	_i2c_read_data_PARM_2,#0x0c
      00063A 75*13 02         [24] 2658 	mov	_i2c_read_data_PARM_4,#0x02
      00063D 75 82 C0         [24] 2659 	mov	dpl,#0xc0
      000640 12r04r02         [24] 2660 	lcall	_i2c_read_data
                           000643  2661 	C$HW10.c$98$1$139 ==.
                                   2662 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:98: heading = (((unsigned int)Data[0] << 8) | Data[1]);
      000643 AF*24            [24] 2663 	mov	r7,_ReadCompass_Data_1_139
      000645 7E 00            [12] 2664 	mov	r6,#0x00
      000647 AC*25            [24] 2665 	mov	r4,(_ReadCompass_Data_1_139 + 0x0001)
      000649 7D 00            [12] 2666 	mov	r5,#0x00
      00064B EC               [12] 2667 	mov	a,r4
      00064C 4E               [12] 2668 	orl	a,r6
      00064D F5 82            [12] 2669 	mov	dpl,a
      00064F ED               [12] 2670 	mov	a,r5
      000650 4F               [12] 2671 	orl	a,r7
      000651 F5 83            [12] 2672 	mov	dph,a
                           000653  2673 	C$HW10.c$99$1$139 ==.
                                   2674 ;	C:\Users\Victor\Documents\RPI\LITEC\hw10\HW10.c:99: return heading;
                           000653  2675 	C$HW10.c$100$1$139 ==.
                           000653  2676 	XG$ReadCompass$0$0 ==.
      000653 22               [24] 2677 	ret
                                   2678 	.area CSEG    (CODE)
                                   2679 	.area CONST   (CODE)
                           000000  2680 FHW10$__str_0$0$0 == .
      000000                       2681 ___str_0:
      000000 0A                    2682 	.db 0x0a
      000001 54 79 70 65 20 64 69  2683 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2684 	.db 0x00
                           000016  2685 FHW10$__str_1$0$0 == .
      000016                       2686 ___str_1:
      000016 20 20 20 20 20 25 63  2687 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2688 	.db 0x00
                           000026  2689 FHW10$__str_2$0$0 == .
      000026                       2690 ___str_2:
      000026 25 63                 2691 	.ascii "%c"
      000028 00                    2692 	.db 0x00
                           000029  2693 FHW10$__str_3$0$0 == .
      000029                       2694 ___str_3:
      000029 25 64                 2695 	.ascii "%d"
      00002B 0A                    2696 	.db 0x0a
      00002C 0D                    2697 	.db 0x0d
      00002D 00                    2698 	.db 0x00
                                   2699 	.area XINIT   (CODE)
                                   2700 	.area CABS    (ABS,CODE)
